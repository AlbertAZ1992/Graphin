{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-document-tsx","path":"/zh/docs/manual/main-concepts/layout","result":{"data":{"site":{"siteMetadata":{"title":"Graphin","githubUrl":"https://github.com/antvis/graphin","docs":[{"slug":"manual","title":{"zh":"使用文档","en":"docs"},"order":0},{"slug":"manual/main-concepts","title":{"zh":"核心概念","en":"Main Concepts"},"order":3},{"slug":"manual/advanced-guides","title":{"zh":"进阶指导","en":"Advanced Guides"},"order":4},{"slug":"manual/readme","title":{"zh":"文档大纲","en":"readme"},"order":5}]},"pathPrefix":"/graphin"},"markdownRemark":{"html":"<p>在图分析过程中，针对不同的分析场景，我们需要不同的布局方案。</p>\n<h2 id=\"01-布局的定义\"><a href=\"#01-%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9A%E4%B9%89\" aria-label=\"01 布局的定义 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 布局的定义</h2>\n<ul>\n<li>布局，顾名思义是如何放置节点，反应在 Graphin 的 <code class=\"language-text\">data.nodes</code> 中就是节点的 x，y 坐标。</li>\n<li>布局算法就是一个函数，用来给节点添加 x，y 坐标。</li>\n</ul>\n<p>布局的指定是通过 Graphin 的 <code class=\"language-text\">props.layout</code> 实现的：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Graphin</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">layout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'force'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"02-内置布局\"><a href=\"#02-%E5%86%85%E7%BD%AE%E5%B8%83%E5%B1%80\" aria-label=\"02 内置布局 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. 内置布局</h2>\n<h3 id=\"01-circle\"><a href=\"#01-circle\" aria-label=\"01 circle permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. <strong>circle</strong></h3>\n<ul>\n<li>名称：圆形布局</li>\n<li>特点：整体呈现圆形排布。</li>\n<li>适用场景：当我们找到一群点中的关键节点，它所联系的节点最多，那么利用圆形布局，便可以在中心处轻松找到这个关键节点</li>\n</ul>\n<p>使用实例：</p>\n<iframe\n     src=\"https://codesandbox.io/embed/data-driven-lc4pn?fontsize=14&hidenavigation=0&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;padding:20px;\"\n     title=\"graphin-layout-circle\"\n     allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n     sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n   ></iframe>\n<p>圆形布局配置请查看 <a href=\"/graphin/zh/docs/api/layout#circleoptions\">API 文档</a>。</p>\n<h3 id=\"02-concentric\"><a href=\"#02-concentric\" aria-label=\"02 concentric permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. <strong>concentric</strong></h3>\n<ul>\n<li>名称： 同心圆布局</li>\n<li>特点：将节点按照度数排序，节点度数大的一群点会排列在最中心，度数小的节点会分布在最外层。整体呈现同心圆排布</li>\n<li>适用场景：当我们找到一群点中的关键节点，它所联系的节点最多，那么利用圆形布局，便可以在中心处轻松找到这个关键节点</li>\n</ul>\n<p>使用实例：</p>\n<iframe\n     src=\"https://codesandbox.io/embed/graphin-layout-circle-ebz5n?fontsize=14&hidenavigation=0&theme=dark\"\n     style=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;padding:20px;\"\n     title=\"graphin-layout-concentric\"\n     allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n     sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n   ></iframe>\n<p>同心圆布局配置请查看 <a href=\"/graphin/zh/docs/api/layout#concentricoptions\">API 文档</a>。</p>\n<h3 id=\"03-grid\"><a href=\"#03-grid\" aria-label=\"03 grid permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. <strong>grid</strong></h3>\n<ul>\n<li>名称：网格布局</li>\n<li>特点：将节点依次整齐排列，呈现网格状</li>\n<li>适用场景：节点的位置按照用户自定义后的排序展开，清晰明了，一般用于其他布局的前置分析</li>\n</ul>\n<p>使用实例：</p>\n<iframe\n     src=\"https://codesandbox.io/embed/graphin-layout-concentric-gfrwn?fontsize=14&hidenavigation=0&theme=dark\"\n     style=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;padding:20px;\"\n     title=\"graphin-layout-grid\"\n     allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n     sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n   ></iframe>\n<p>网格布局配置请查看 <a href=\"/graphin/zh/docs/api/layout#concentricoptions\">API 文档</a>。</p>\n<h3 id=\"04-code-classlanguage-textradialcode\"><a href=\"#04-code-classlanguage-textradialcode\" aria-label=\"04 code classlanguage textradialcode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04. <code class=\"language-text\">radial</code></h3>\n<ul>\n<li>名称：迳向布局</li>\n<li>特点：节点像雷达一样散开，是静态布局里解决交叉问题的主要布局算法</li>\n<li>适用场景: ??</li>\n</ul>\n<p>使用实例：</p>\n<iframe\n     src=\"https://codesandbox.io/embed/graphin-layout-concentric-6tn27?fontsize=14&hidenavigation=0&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;padding:20px;\"\n     title=\"graphin-layout-radial\"\n     allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n     sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n   ></iframe>\n<p>迳向布局配置请查看 <a href=\"/graphin/zh/docs/api/layout#radialoptions\">API 文档</a>。</p>\n<h3 id=\"05-code-classlanguage-textdagrecode\"><a href=\"#05-code-classlanguage-textdagrecode\" aria-label=\"05 code classlanguage textdagrecode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>05. <code class=\"language-text\">dagre</code></h3>\n<ul>\n<li>名称：有向层次布局</li>\n<li>特点：按照边的方向与节点的层次，呈现树形排列</li>\n<li>适用场景：当我们需要知道一群数据里的层次结构，上下游关系，那么 dagre 有向层次布局便是非常好的办法。</li>\n</ul>\n<p>使用实例：</p>\n<iframe\n     src=\"https://codesandbox.io/embed/graphin-layout-radial-bo0bl?fontsize=14&hidenavigation=0&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;padding:20px;\"\n     title=\"graphin-layout-dagre\"\n     allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n     sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n   ></iframe>\n<p>有向层次布局配置请查看 <a href=\"/graphin/zh/docs/api/layout#dagreoptions\">API 文档</a>。</p>\n<h3 id=\"06-code-classlanguage-textforcecode\"><a href=\"#06-code-classlanguage-textforcecode\" aria-label=\"06 code classlanguage textforcecode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>06. <code class=\"language-text\">force</code></h3>\n<ul>\n<li>名称： 力导布局</li>\n<li>特点：节点按照自然受力进行分布，节点间模拟电荷斥力保持不相交，边通过弹簧拉力保持不相离，最终在多次动态迭代中，达到一个受力平衡</li>\n<li>适用场景：想解决点边相交问题的时候，使用力导非常合适。一般作为其他布局的后置布局使用</li>\n</ul>\n<p>使用实例：</p>\n<iframe\n     src=\"https://codesandbox.io/embed/graphin-layout-dagre-l3s4l?fontsize=14&hidenavigation=0&theme=dark\"\n     style=\"width:100%; height:700px; border:0; border-radius: 4px; overflow:hidden;padding:20px;\"\n     title=\"graphin-layout-force\"\n     allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n     sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n   ></iframe>\n<p>力导布局配置请查看 <a href=\"/graphin/zh/docs/api/layout#forceoptions\">API 文档</a>。</p>","tableOfContents":"<ul>\n<li><a href=\"/graphin/zh/docs/manual/main-concepts/layout/#01-%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9A%E4%B9%89\">01. 布局的定义</a></li>\n<li>\n<p><a href=\"/graphin/zh/docs/manual/main-concepts/layout/#02-%E5%86%85%E7%BD%AE%E5%B8%83%E5%B1%80\">02. 内置布局</a></p>\n<ul>\n<li><a href=\"/graphin/zh/docs/manual/main-concepts/layout/#01-circle\">01. circle</a></li>\n<li><a href=\"/graphin/zh/docs/manual/main-concepts/layout/#02-concentric\">02. concentric</a></li>\n<li><a href=\"/graphin/zh/docs/manual/main-concepts/layout/#03-grid\">03. grid</a></li>\n<li><a href=\"/graphin/zh/docs/manual/main-concepts/layout/#04-code-classlanguage-textradialcode\">04. &#x3C;code class=\"language-text\">radial&#x3C;/code></a></li>\n<li><a href=\"/graphin/zh/docs/manual/main-concepts/layout/#05-code-classlanguage-textdagrecode\">05. &#x3C;code class=\"language-text\">dagre&#x3C;/code></a></li>\n<li><a href=\"/graphin/zh/docs/manual/main-concepts/layout/#06-code-classlanguage-textforcecode\">06. &#x3C;code class=\"language-text\">force&#x3C;/code></a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/zh/docs/manual/main-concepts/layout","readingTime":{"text":"2 min read","time":82200}},"frontmatter":{"title":"Layout 自动布局"},"parent":{"__typename":"File","relativePath":"manual/main-concepts/layout.zh.md"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/en/docs/manual/introduction"},"frontmatter":{"title":"Graphin","order":0}}},{"node":{"fields":{"slug":"/zh/docs/manual/introduction"},"frontmatter":{"title":"Graphin 简介","order":0}}},{"node":{"fields":{"slug":"/en/docs/manual/main-concepts/data"},"frontmatter":{"title":"Data","order":0}}},{"node":{"fields":{"slug":"/zh/docs/manual/main-concepts/data"},"frontmatter":{"title":"Data 数据驱动","order":0}}},{"node":{"fields":{"slug":"/zh/docs/manual/advanced-guides/extend"},"frontmatter":{"title":"Extend 扩展接口","order":0}}},{"node":{"fields":{"slug":"/en/docs/manual/advanced-guides/extend"},"frontmatter":{"title":"Extend","order":0}}},{"node":{"fields":{"slug":"/en/docs/api/graphin"},"frontmatter":{"title":"Graphin","order":1}}},{"node":{"fields":{"slug":"/zh/docs/api/graphin"},"frontmatter":{"title":"Graphin 组件","order":1}}},{"node":{"fields":{"slug":"/en/docs/manual/main-concepts/layout"},"frontmatter":{"title":"Layout","order":1}}},{"node":{"fields":{"slug":"/zh/docs/manual/main-concepts/layout"},"frontmatter":{"title":"Layout 自动布局","order":1}}},{"node":{"fields":{"slug":"/en/docs/manual/advanced-guides/register"},"frontmatter":{"title":"Register","order":1}}},{"node":{"fields":{"slug":"/zh/docs/manual/advanced-guides/register"},"frontmatter":{"title":"Register 注册接口","order":1}}},{"node":{"fields":{"slug":"/zh/docs/manual/main-concepts/components"},"frontmatter":{"title":"Components 分析组件","order":2}}},{"node":{"fields":{"slug":"/en/docs/manual/main-concepts/components"},"frontmatter":{"title":"Components","order":2}}},{"node":{"fields":{"slug":"/en/docs/manual/advanced-guides/graphRef"},"frontmatter":{"title":"Graphin","order":2}}},{"node":{"fields":{"slug":"/zh/docs/manual/advanced-guides/graphRef"},"frontmatter":{"title":"Graphin 实例接口","order":2}}},{"node":{"fields":{"slug":"/en/docs/manual/getting-started"},"frontmatter":{"title":"Getting Started","order":2}}},{"node":{"fields":{"slug":"/zh/docs/manual/getting-started"},"frontmatter":{"title":"快速上手","order":2}}},{"node":{"fields":{"slug":"/zh/docs/api/extend"},"frontmatter":{"title":"Extend","order":3}}},{"node":{"fields":{"slug":"/en/docs/api/extend"},"frontmatter":{"title":"Extend","order":3}}},{"node":{"fields":{"slug":"/en/docs/api/register"},"frontmatter":{"title":"Register","order":3}}},{"node":{"fields":{"slug":"/en/docs/api/layout"},"frontmatter":{"title":"Layout","order":3}}},{"node":{"fields":{"slug":"/zh/docs/api/layout"},"frontmatter":{"title":"Layout","order":3}}},{"node":{"fields":{"slug":"/zh/docs/api/register"},"frontmatter":{"title":"Register","order":3}}},{"node":{"fields":{"slug":"/zh/docs/manual/main-concepts/events"},"frontmatter":{"title":"Events 事件响应","order":3}}},{"node":{"fields":{"slug":"/en/docs/manual/main-concepts/events"},"frontmatter":{"title":"Events","order":3}}},{"node":{"fields":{"slug":"/en/docs/manual/advanced-guides/options"},"frontmatter":{"title":"Options","order":3}}},{"node":{"fields":{"slug":"/zh/docs/manual/advanced-guides/options"},"frontmatter":{"title":"Options 配置","order":3}}},{"node":{"fields":{"slug":"/en/docs/api/components"},"frontmatter":{"title":"Analysis component","order":5}}},{"node":{"fields":{"slug":"/zh/docs/api/components"},"frontmatter":{"title":"分析组件","order":5}}},{"node":{"fields":{"slug":"/zh/docs/manual/FAQ"},"frontmatter":{"title":"FAQ","order":6}}},{"node":{"fields":{"slug":"/en/docs/manual/FAQ"},"frontmatter":{"title":"FAQ","order":6}}},{"node":{"fields":{"slug":"/zh/docs/manual/Contributing"},"frontmatter":{"title":"贡献指南","order":7}}},{"node":{"fields":{"slug":"/en/docs/manual/contributing"},"frontmatter":{"title":"Contributing","order":7}}},{"node":{"fields":{"slug":"/zh/docs/manual/change-log"},"frontmatter":{"title":"更新日志","order":8}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"node":{"fields":{"slug":"/zh/docs/manual/main-concepts/data"},"frontmatter":{"title":"Data 数据驱动","order":0},"html":"<h2 id=\"01-数据的定义\"><a href=\"#01-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AE%9A%E4%B9%89\" aria-label=\"01 数据的定义 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 数据的定义</h2>\n<blockquote>\n<p>图的数据结构比较固定。一般用 nodes 表示节点的集合，用 edges 表示边的集合。</p>\n</blockquote>\n<ul>\n<li>\n<ol>\n<li>用 TypeScript 的类型来定义数据 data 如下：</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/** 节点 */</span>\n    nodes<span class=\"token punctuation\">:</span> Node<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/** 边 */</span>\n    edges<span class=\"token punctuation\">:</span> Edge<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<ol start=\"2\">\n<li>Node 最重要的三个概念</li>\n</ol>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>  属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>id 是节点的唯一标识，如果 id 不存在，Graphin 会忽略这个节点</td>\n</tr>\n<tr>\n<td>shape</td>\n<td>shape 是告诉 Graphin，渲染什么样的节点，默认设置为内置的 <code class=\"language-text\">CircleNode</code> 类型 。shape 和 G6 中的 shape 是同一个概念</td>\n</tr>\n<tr>\n<td>data</td>\n<td>data 保存了后端返回的节点数据。单独用 data 字段来存储是为了避免和 Graphin 的节点数据混在一起</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<ol start=\"3\">\n<li>Edge 最重要的三个概念</li>\n</ol>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>  属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source</td>\n<td>source 是边连接的源节点的 id ，是 <code class=\"language-text\">string</code> 类型</td>\n</tr>\n<tr>\n<td>target</td>\n<td>target 是边连接的目标节点的 id ，是 <code class=\"language-text\">string</code> 类型</td>\n</tr>\n<tr>\n<td>data</td>\n<td>data 保存了后端返回的边数据，单独用 data 字段来存储是为了避免和 Graphin 的节点数据混在一起</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>完整的 API，请查看<a href=\"../apis/#data\">API 手册</a></p>\n</blockquote>\n<h2 id=\"02-从数据到视图\"><a href=\"#02-%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%88%B0%E8%A7%86%E5%9B%BE\" aria-label=\"02 从数据到视图 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. 从数据到视图</h2>\n<p>Graphin 数据全量渲染和增量添加：</p>\n<ul>\n<li>增量数据添加：Graphin 会根据前置布局，动态完成增量数据添加，达到节点扩散，关系发现等效果。</li>\n<li>全量数据渲染：Graphin 支持全量数据渲染，满足保存，导入，导出等需求。</li>\n</ul>\n<p>不管是何种方式，我们在使用 Graphin 的时候，只需要传入要渲染的 data 就可以。</p>\n<p>有时候我们需要根据业务场景，动态调整节点的颜色，大小等。在 Graphin 中，完成这个需求也很简单，只需要自定义一个 <code class=\"language-text\">transform</code> 函数。因为 Graphin 是数据驱动设计，改变数据即可以改变视图。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Graphin</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>对于默认的 <code class=\"language-text\">CircleNode</code> 节点，我们只需要改变每个节点 style 即可：</p>\n<table>\n<thead>\n<tr>\n<th>  属性</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nodeSize</td>\n<td>20</td>\n<td>节点的大小</td>\n</tr>\n<tr>\n<td>primaryColor</td>\n<td>'#9900EF'</td>\n<td>节点的主要颜色</td>\n</tr>\n<tr>\n<td>fontSize</td>\n<td>12</td>\n<td>文本的字体大小</td>\n</tr>\n<tr>\n<td>fontColor</td>\n<td>'#3b3b3b'</td>\n<td>文本的字体颜色</td>\n</tr>\n<tr>\n<td>dark</td>\n<td>'#eee'</td>\n<td>dark 置灰</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>自定义 transform 函数</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> transform <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">nodes</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nodes<span class=\"token punctuation\">:</span> NodeData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                id<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n                data<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 根据type来指定渲染的shape</span>\n                shape<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'phone'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'MyCustomNode'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'CircleNode'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 根据数据的渲染样式</span>\n                style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    nodeSize<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> <span class=\"token number\">20</span> <span class=\"token operator\">?</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">edges</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">edges<span class=\"token punctuation\">:</span> EdgeData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> edges<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">data</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> nodes<span class=\"token punctuation\">:</span> NodeData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> edges<span class=\"token punctuation\">:</span> EdgeData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            nodes<span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">nodes</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            edges<span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">edges</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"03-特殊情况\"><a href=\"#03-%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5\" aria-label=\"03 特殊情况 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. 特殊情况</h2>\n<p>通过数据的定义，我们知道 Graphin 的 data 是必选项，我们把几种特殊的情况列举在下面：</p>\n<ul>\n<li>如何渲染一个空画布</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Graphin</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> nodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<ul>\n<li>数据 data 和布局 layout 组合起来是如何渲染的？</li>\n</ul>\n<p>渲染包含两个关键点</p>\n<ul>\n<li>\n<ol>\n<li>节点的形状：它由 shape 和 id 共同决定的</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>节点的位置：它由 Node 的 x 和 y 值决定的</li>\n</ol>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>  x、y 坐标</th>\n<th>Layout 布局</th>\n<th>渲染结果</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存在</td>\n<td>不存在</td>\n<td>根据 data.nodes 中的 x，y 进行布局渲染</td>\n<td>图保存再复现</td>\n</tr>\n<tr>\n<td>存在</td>\n<td>存在</td>\n<td>忽略 data.nodes 中的布局信息，根据 layout.name 进行布局渲染</td>\n<td>布局切换</td>\n</tr>\n<tr>\n<td>不存在</td>\n<td>不存在 / 存在</td>\n<td>根据 layout.name 进行布局渲染</td>\n<td>布局渲染</td>\n</tr>\n</tbody>\n</table>"}},"next":{"node":{"fields":{"slug":"/zh/docs/manual/advanced-guides/extend"},"frontmatter":{"title":"Extend 扩展接口","order":0},"html":"<h2 id=\"extend-介绍\"><a href=\"#extend-%E4%BB%8B%E7%BB%8D\" aria-label=\"extend 介绍 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extend 介绍</h2>\n<p>extend 顾名思义是扩展的意思。Graphin 支持 3 种扩展类型：扩展自定义布局，扩展自定义节点，扩展自定义图标。</p>\n<p>Graphin 内置了布局，节点 与图标。除此之外，Graphin 给用户提供了扩展机制，用户可以方便的通过 extend 配置自定义布局，节点与图表。</p>\n<p>扩展是通过 <code class=\"language-text\">props.extend</code> 实现的：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Graphin</span></span>\n    <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">extend</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        nodeShape<span class=\"token punctuation\">:</span> extendNodeShapeFunction<span class=\"token punctuation\">,</span>\n        marker<span class=\"token punctuation\">:</span> extendMakerFunction<span class=\"token punctuation\">,</span>\n        layout<span class=\"token punctuation\">:</span> extendLayoutFunction<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>下面让我们来看如何具体自定义布局，节点和图标。</p>\n<h2 id=\"扩展布局\"><a href=\"#%E6%89%A9%E5%B1%95%E5%B8%83%E5%B1%80\" aria-label=\"扩展布局 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>扩展布局</h2>\n<p>让我们来实现一个简单的随机布局作为例子。 <a href=\"https://codesandbox.io/s/extendlayout-vxfds?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\" target=\"_self\" rel=\"nofollow\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit extendLayout\"></a></p>\n<p>首先我们要定义一个 layout 函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> Graphin<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Data<span class=\"token punctuation\">,</span> GraphinProps<span class=\"token punctuation\">,</span> LayoutOption <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@antv/graphin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">layout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">graphin<span class=\"token punctuation\">:</span> Graphin<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">:</span> GraphinProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'custom'</span><span class=\"token punctuation\">,</span>\n            desc<span class=\"token punctuation\">:</span> <span class=\"token string\">'自定义随机布局'</span><span class=\"token punctuation\">,</span>\n            icon<span class=\"token punctuation\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span>\n            layout<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> Data<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> LayoutOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> Data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token operator\">...</span>node<span class=\"token punctuation\">,</span>\n                        x<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        y<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        nodes<span class=\"token punctuation\">,</span>\n                        edges<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> layout<span class=\"token punctuation\">;</span></code></pre></div>\n<p>这个 layout 函数返回一个数组，每个数组都是一个自定义 layout 配置。layout 配置中最关键的就是 layout 方法，这个方法接受 data 作为参数，然后返回修改过的 data 数据。修改的就是每个节点上的 x 和 y 属性，也就是给每个节点附上了位置信息。</p>\n<p>接下来我们在 Graphin 的 <code class=\"language-text\">extend.layout</code> 中传入这个函数，并制定 <code class=\"language-text\">layout.name</code> 为 custom，就可以使用这个自定义 layout 了。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">\"./layout\"</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Graphin</span></span>\n    <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">layout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"custom\"</span>\n    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">extend</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        layout\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><code class=\"language-text\">extend.layout</code> 函数的 API 参见<a href=\"/graphin/zh/docs/api/layout\">文档</a>。</p>\n<h2 id=\"扩展节点\"><a href=\"#%E6%89%A9%E5%B1%95%E8%8A%82%E7%82%B9\" aria-label=\"扩展节点 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>扩展节点</h2>\n<p>扩展节点指的是扩展 NodeShape，也就是 G6 中节点的渲染形状和样式。 <a href=\"https://codesandbox.io/s/extendnodeshape-nilen?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\" target=\"_self\" rel=\"nofollow\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit extendNodeShape\"></a></p>\n<p>在 Graphin 中，我们支持通过 JSON 配置的形式来配置 NodeShape。让开发者不用使用 G6 的 API，声明式的对 NodeShape 进行扩展。</p>\n<p>比如我们要注册一个新的 RectNode 类型的 NodeShape。首先我们要定义一个 NodeShape 函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Node <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@antv/graphin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renderRectNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">:</span> Node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> style<span class=\"token punctuation\">:</span> Style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>defaultStyles<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>node<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> badgeNumber <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        shape<span class=\"token punctuation\">:</span> <span class=\"token string\">'RectNode'</span><span class=\"token punctuation\">,</span>\n        shapeComponents<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                shape<span class=\"token punctuation\">:</span> <span class=\"token string\">'rect'</span><span class=\"token punctuation\">,</span>\n                attrs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'rect-container'</span><span class=\"token punctuation\">,</span>\n                    x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                    y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                    width<span class=\"token punctuation\">:</span> style<span class=\"token punctuation\">.</span>containerWidth<span class=\"token punctuation\">,</span>\n                    height<span class=\"token punctuation\">:</span> style<span class=\"token punctuation\">.</span>containerWidth<span class=\"token punctuation\">,</span>\n                    fill<span class=\"token punctuation\">:</span> style<span class=\"token punctuation\">.</span>containerFill<span class=\"token punctuation\">,</span>\n                    stroke<span class=\"token punctuation\">:</span> style<span class=\"token punctuation\">.</span>containerStroke<span class=\"token punctuation\">,</span>\n                    cursor<span class=\"token punctuation\">:</span> <span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span>\n                    lineWidth<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                    radius<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>JSON 配置文档 -></p>\n<h2 id=\"扩展图标\"><a href=\"#%E6%89%A9%E5%B1%95%E5%9B%BE%E6%A0%87\" aria-label=\"扩展图标 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>扩展图标</h2>\n<p>如果想在 Graphin 节点上展示自定义的 icon，就需要通过 <code class=\"language-text\">extend.marker</code> 进行扩展：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'./layout'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>Graphin\n    data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span>\n    extend<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">marker</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'company'</span><span class=\"token punctuation\">,</span>\n                    path<span class=\"token punctuation\">:</span>\n                        <span class=\"token string\">'&lt;path d=\"M831.808 869.184V171.168l-97.856-65.312-356.704 159.2v123.2l-197.12 68.64v412.288H160v48.992h64.352V485.472l261.472-85.696v518.4h181.024v-53.056h-40.224V391.584l-94.912-57.152-106.24 36.992V293.6l257.472-114.304v738.848H864v-48.992h-32.192v0.032zM256.544 595.68l189.056-61.216v-81.632l-189.056 65.312v77.536z m0 106.144l189.056-40.832v-81.632l-189.056 48.992v73.472z m0 110.208l189.056-24.512v-81.632l-189.056 28.576v77.568z m0 106.112l189.056-4.096v-81.632l-189.056 8.192v77.536z\" p-id=\"818\">&lt;/path>'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">extend.marker</code> 的 API 很简单，就是一个返回图标配置数组的函数。返回的图标配置中，name 代表 icon 的标识，也就是 G6 NodeShape 中 Marker 的 symbol 属性的值。path 就是 SVG 图标的 XML 代码。</p>"}}}}}