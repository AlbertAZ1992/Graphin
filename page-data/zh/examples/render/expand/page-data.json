{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-0-10-49-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/render/expand","result":{"data":{"site":{"siteMetadata":{"title":"Graphin","githubUrl":"https://github.com/antvis/graphin","examples":[{"slug":"render","icon":null,"title":{"zh":"数据渲染","en":"render"}},{"slug":"layout","icon":null,"title":{"zh":"内置布局","en":"layout"}},{"slug":"shape","icon":null,"title":{"zh":"节点与边","en":"shape"}},{"slug":"components","icon":null,"title":{"zh":"分析组件","en":"components"}}],"playground":null},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"html":"<p>Graphin 支持渲染节点：节点本身无任何布局信息(x,y)</p>","fields":{"slug":"/zh/examples/render/simple"},"frontmatter":{"title":"数据无布局信息","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"render/simple/index.zh.md"}}},{"node":{"html":"<p>Graphin 中内置了 5 种基础布局，分别为<code class=\"language-text\">circle</code> , <code class=\"language-text\">concentirc</code> , <code class=\"language-text\">grid</code> , <code class=\"language-text\">radial</code> , <code class=\"language-text\">dagre</code> , 它们通过 Graphin 的 <code class=\"language-text\">props.layout</code>来指定具体的布局函数，为 <code class=\"language-text\">data.nodes</code> 中的节点的添加 x，y 坐标。具体的应用场景详见 <a href=\"/zh/docs/manual/main-concepts/layout\">Layout 自动布局</a>,具体的参数配置详见 <a href=\"/zh/docs/api/layout\">Layout API</a></p>","fields":{"slug":"/zh/examples/layout/base"},"frontmatter":{"title":"基础布局","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"layout/base/index.zh.md"}}},{"node":{"html":"<p>Toolbar 工具栏</p>","fields":{"slug":"/zh/examples/components/toolbar"},"frontmatter":{"title":"toolbar 工具栏","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.zh.md"}}},{"node":{"html":"<ul>\n<li>渲染节点：节点本身携带布局信息(x,y)</li>\n</ul>","fields":{"slug":"/zh/examples/render/save"},"frontmatter":{"title":"数据有布局信息","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"render/save/index.zh.md"}}},{"node":{"html":"<p>Graphin 内置了 6 款布局，且支持自定义布局</p>","fields":{"slug":"/zh/examples/layout/force"},"frontmatter":{"title":"力导布局","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"layout/force/index.zh.md"}}},{"node":{"html":"<p>目前 Graphin 内置了 1 款节点 <code class=\"language-text\">CircleNode</code>，同时也支持自定义节点</p>","fields":{"slug":"/zh/examples/shape/node"},"frontmatter":{"title":"设置节点","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"shape/node/index.zh.md"}}},{"node":{"html":"<p>增量数据渲染</p>\n<ul>\n<li>关系分析：添加节点</li>\n<li>关系分析：节点扩散</li>\n</ul>","fields":{"slug":"/zh/examples/render/expand"},"frontmatter":{"title":"增量数据渲染","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"render/expand/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/layout/sublayout"},"frontmatter":{"title":"子图布局","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"layout/sublayout/index.zh.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"render/expand/demo/AddNode.jsx","absolutePath":"/Users/pomelo/Desktop/workspace/graphin/packages/graphin-site/examples/render/expand/demo/AddNode.jsx","order":0,"filename":"AddNode.jsx","title":"增量数据渲染：添加节点","screenshot":"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*nBhpT5HbGOAAAAAAAAAAAABkARQnAQ","source":"/* eslint-disable no-undef */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Graphin from '@antv/graphin';\nimport '@antv/graphin/dist/index.css'; // 引入Graphin CSS\nimport { Input } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { Search } = Input;\n\nconst App = () => {\n    const [data, setData] = React.useState({\n        nodes: [],\n        edges: [],\n    });\n    const addNode = id => {\n        const newNodes = [\n            {\n                id,\n                data: {\n                    label: `node-${id}`,\n                },\n                shape: 'CircleNode',\n                label: `node-${id}`, // 应该支持label的选项\n            },\n        ];\n        setData({\n            nodes: [...data.nodes, ...newNodes],\n            edges: [],\n        });\n    };\n    return (\n        <div>\n            <Search placeholder=\"输入节点ID\" enterButton=\"添加节点\" size=\"large\" onSearch={addNode} />\n            <Graphin data={data} layout={{ name: 'grid' }} />\n        </div>\n    );\n};\nconst rootElement = document.getElementById('container');\nReactDOM.render(<App />, rootElement);\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"@antv/graphin\", \"@antv/graphin/dist/index.css\", \"antd\", \"antd/dist/antd.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"@antv/graphin\"), require(\"@antv/graphin/dist/index.css\"), require(\"antd\"), require(\"antd/dist/antd.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.graphin, global.index, global.antd, global.antd);\n    global.AddNode = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _graphin, _index, _antd, _antd2) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireDefault(_graphin);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var Search = _antd.Input.Search;\n\n  var App = function App() {\n    var _React$useState = _react.default.useState({\n      nodes: [],\n      edges: []\n    }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        data = _React$useState2[0],\n        setData = _React$useState2[1];\n\n    var addNode = function addNode(id) {\n      var newNodes = [{\n        id: id,\n        data: {\n          label: \"node-\".concat(id)\n        },\n        shape: 'CircleNode',\n        label: \"node-\".concat(id) // 应该支持label的选项\n\n      }];\n      setData({\n        nodes: [].concat(_toConsumableArray(data.nodes), newNodes),\n        edges: []\n      });\n    };\n\n    return _react.default.createElement(\"div\", null, _react.default.createElement(Search, {\n      placeholder: \"\\u8F93\\u5165\\u8282\\u70B9ID\",\n      enterButton: \"\\u6DFB\\u52A0\\u8282\\u70B9\",\n      size: \"large\",\n      onSearch: addNode\n    }), _react.default.createElement(_graphin.default, {\n      data: data,\n      layout: {\n        name: 'grid'\n      }\n    }));\n  };\n\n  var rootElement = document.getElementById('container');\n\n  _reactDom.default.render(_react.default.createElement(App, null), rootElement);\n});"},{"relativePath":"render/expand/demo/NodeExpand.jsx","absolutePath":"/Users/pomelo/Desktop/workspace/graphin/packages/graphin-site/examples/render/expand/demo/NodeExpand.jsx","order":1,"filename":"NodeExpand.jsx","title":"增量数据渲染：节点扩散","screenshot":"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*nBhpT5HbGOAAAAAAAAAAAABkARQnAQ","source":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Graphin, { Utils } from '@antv/graphin';\nimport { Button } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport '@antv/graphin/dist/index.css';\n\nconst App = () => {\n    const [state, setState] = React.useState({\n        selected: [],\n        data: Utils.mock(5).graphin(),\n    });\n\n    const { data, selected } = state;\n    const graphRef = React.createRef(null);\n    React.useEffect(() => {\n        const { graph } = graphRef.current;\n        const onNodeClick = e => {\n            setState({\n                ...state,\n                selected: [e.item.get('model')],\n            });\n        };\n        graph.on('node:click', onNodeClick);\n        return () => {\n            graph.off('node:click', onNodeClick);\n        };\n    }, [state]);\n\n    const onExpand = () => {\n        const count = 5;\n        const expandData = Utils.mock(count)\n            .expand(selected)\n            .graphin();\n        setState({\n            ...state,\n            data: {\n                nodes: [...state.data.nodes, ...expandData.nodes],\n                edges: [...state.data.edges, ...expandData.edges],\n            },\n        });\n    };\n    return (\n        <div className=\"App\">\n            <Button onClick={onExpand} type=\"primary\">\n                Node Expand\n            </Button>\n            <Graphin data={data} layout={{ name: 'concentric' }} ref={graphRef} />\n        </div>\n    );\n};\n// eslint-disable-next-line no-undef\nconst rootElement = document.getElementById('container');\n\nReactDOM.render(<App />, rootElement);\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"@antv/graphin\", \"antd\", \"antd/dist/antd.css\", \"@antv/graphin/dist/index.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"@antv/graphin\"), require(\"antd\"), require(\"antd/dist/antd.css\"), require(\"@antv/graphin/dist/index.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.graphin, global.antd, global.antd, global.index);\n    global.NodeExpand = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _graphin, _antd, _antd2, _index) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireWildcard(_graphin);\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var App = function App() {\n    var _React$useState = _react.default.useState({\n      selected: [],\n      data: _graphin.Utils.mock(5).graphin()\n    }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n    var data = state.data,\n        selected = state.selected;\n\n    var graphRef = _react.default.createRef(null);\n\n    _react.default.useEffect(function () {\n      var graph = graphRef.current.graph;\n\n      var onNodeClick = function onNodeClick(e) {\n        setState({ ...state,\n          selected: [e.item.get('model')]\n        });\n      };\n\n      graph.on('node:click', onNodeClick);\n      return function () {\n        graph.off('node:click', onNodeClick);\n      };\n    }, [state]);\n\n    var onExpand = function onExpand() {\n      var count = 5;\n\n      var expandData = _graphin.Utils.mock(count).expand(selected).graphin();\n\n      setState({ ...state,\n        data: {\n          nodes: [].concat(_toConsumableArray(state.data.nodes), _toConsumableArray(expandData.nodes)),\n          edges: [].concat(_toConsumableArray(state.data.edges), _toConsumableArray(expandData.edges))\n        }\n      });\n    };\n\n    return _react.default.createElement(\"div\", {\n      className: \"App\"\n    }, _react.default.createElement(_antd.Button, {\n      onClick: onExpand,\n      type: \"primary\"\n    }, \"Node Expand\"), _react.default.createElement(_graphin.default, {\n      data: data,\n      layout: {\n        name: 'concentric'\n      },\n      ref: graphRef\n    }));\n  }; // eslint-disable-next-line no-undef\n\n\n  var rootElement = document.getElementById('container');\n\n  _reactDom.default.render(_react.default.createElement(App, null), rootElement);\n});"}]}}}}