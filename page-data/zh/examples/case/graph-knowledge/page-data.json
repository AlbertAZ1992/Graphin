{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-0-10-49-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/case/graph-knowledge","result":{"data":{"site":{"siteMetadata":{"title":"Graphin","githubUrl":"https://github.com/antvis/graphin","examples":[{"slug":"render","icon":null,"title":{"zh":"数据渲染","en":"render"}},{"slug":"layout","icon":null,"title":{"zh":"内置布局","en":"layout"}},{"slug":"shape","icon":null,"title":{"zh":"节点与边","en":"shape"}},{"slug":"components","icon":null,"title":{"zh":"分析组件","en":"components"}},{"slug":"advanced","icon":null,"title":{"zh":"高级功能","en":"advanced"}},{"slug":"case","icon":null,"title":{"zh":"分析案例","en":"case"}}],"playground":null},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"html":"<p>Graphin 支持渲染节点：节点本身无任何布局信息(x,y)</p>","fields":{"slug":"/zh/examples/render/simple"},"frontmatter":{"title":"数据无布局信息","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"render/simple/index.zh.md"}}},{"node":{"html":"<p>Graphin 中内置了 5 种基础布局，分别为<code class=\"language-text\">circle</code> , <code class=\"language-text\">concentirc</code> , <code class=\"language-text\">grid</code> , <code class=\"language-text\">radial</code> , <code class=\"language-text\">dagre</code> , 它们通过 Graphin 的 <code class=\"language-text\">props.layout</code>来指定具体的布局函数，为 <code class=\"language-text\">data.nodes</code> 中的节点的添加 x，y 坐标。具体的应用场景详见 <a href=\"/zh/docs/manual/main-concepts/layout\">Layout 自动布局</a>,具体的参数配置详见 <a href=\"/zh/docs/api/layout\">Layout API</a></p>","fields":{"slug":"/zh/examples/layout/base"},"frontmatter":{"title":"基础布局","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"layout/base/index.zh.md"}}},{"node":{"html":"<ul>\n<li>demo-1: General Toolbar, which provides analysis operations. Built-in redo (Operation History), canvas scaling, full screen, node focus, canvas snapshot download and other functions.</li>\n<li>demo-2: Custom Toolbar, which provides direction to control horizontal or vertical display. We can use the render function to expand the Toolbar. By using render, we can add custom functions to the Toolbar, such as layout switching.</li>\n</ul>","fields":{"slug":"/en/examples/components/toolbar"},"frontmatter":{"title":"Toolbar","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.en.md"}}},{"node":{"html":"<ul>\n<li>demo-1 : 常规 Toolbar，Toolbar 是提供分析操作的工具栏。内置了撤销重做（操作历史），画布缩放，全屏，节点聚焦，画布快照下载等等功能。</li>\n<li>demo-2 : 自定义 Toolbar，Toolbar 提供了 direction 来控制横向或者纵向显示。我们可以用 render 函数来拓展 Toolbar，使用 render，我们可以给 Toolbar 添加自定义的功能，比如布局切换等等</li>\n</ul>","fields":{"slug":"/zh/examples/components/toolbar"},"frontmatter":{"title":"Toolbar 工具栏","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.zh.md"}}},{"node":{"html":"<ul>\n<li><a href=\"https://k.sina.cn/article_1655444627_62ac149302000yig1.html?from=local\" target=\"_self\" rel=\"nofollow\">《未成年人冒用他人信息注册外卖骑手，发生交通事故谁来担责？》</a></li>\n</ul>","fields":{"slug":"/zh/examples/case/identification"},"frontmatter":{"title":"身份识别","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/identification/index.zh.md"}}},{"node":{"html":"<ul>\n<li>01.风控知识分类</li>\n</ul>","fields":{"slug":"/zh/examples/case/graph-knowledge"},"frontmatter":{"title":"知识图谱","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/graph-knowledge/index.zh.md"}}},{"node":{"html":"<ul>\n<li>利用风险聚集原理，由一个风险节点扩散去找其他风险节点。</li>\n</ul>","fields":{"slug":"/zh/examples/advanced/node-expand"},"frontmatter":{"title":"节点扩散","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-expand/index.zh.md"}}},{"node":{"html":"<ul>\n<li>金融反欺诈：套现风险</li>\n</ul>","fields":{"slug":"/zh/examples/case/anti-fraud"},"frontmatter":{"title":"反欺诈","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/anti-fraud/index.zh.md"}}},{"node":{"html":"<ul>\n<li>根据六度分割理论，发现可能隐藏的关联关系。</li>\n</ul>","fields":{"slug":"/zh/examples/advanced/find-connections"},"frontmatter":{"title":"关系发现","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/find-connections/index.zh.md"}}},{"node":{"html":"<ul>\n<li>渲染节点：节点本身携带布局信息(x,y)</li>\n</ul>","fields":{"slug":"/zh/examples/render/save"},"frontmatter":{"title":"数据有布局信息","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"render/save/index.zh.md"}}},{"node":{"html":"<p>Graphin 内置了 6 款布局，且支持自定义布局</p>","fields":{"slug":"/zh/examples/layout/force"},"frontmatter":{"title":"力导布局","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"layout/force/index.zh.md"}}},{"node":{"html":"<p>ContextMenu is a common way of information display and interaction, which can easily realize node replication, deletion, deselect, and so on. At the same time, we can also initiate a new canvas analysis on the selected node, or perform advanced custom behaviors such as marking, initiating relationship diffusion, and data request. These behaviors only need to be implemented in the onClick callback of MenuItem.</p>\n<ul>\n<li>demo-1: Use options to set the content of the right-click menu</li>\n<li>demo-2: Use render to customize the rendering right-click menu</li>\n</ul>","fields":{"slug":"/en/examples/components/contextmenu"},"frontmatter":{"title":"ContextMenu","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/contextmenu/index.en.md"}}},{"node":{"html":"<p>ContextMenu 是一种常用的信息展示交互方式，可以轻松实现节点的复制，删除，反选等等。同时，我们也可以对选择的节点发起新画布分析，或者进行打标，发起关系扩散，数据请求之类的高级自定义行为。这些行为只需要在 MenuItem 的 onClick 回调中实现就可以。</p>\n<ul>\n<li>demo-1 : 使用 options 设置右键菜单的内容</li>\n<li>demo-2 : 使用 render 自定义渲染右键菜单</li>\n</ul>","fields":{"slug":"/zh/examples/components/contextmenu"},"frontmatter":{"title":"ContextMenu 右键菜单","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/contextmenu/index.zh.md"}}},{"node":{"html":"<p>目前 Graphin 内置了 1 款节点 <code class=\"language-text\">CircleNode</code>，同时也支持自定义节点</p>","fields":{"slug":"/zh/examples/shape/node"},"frontmatter":{"title":"设置节点","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"shape/node/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/layout/sublayout"},"frontmatter":{"title":"子图布局","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"layout/sublayout/index.zh.md"}}},{"node":{"html":"<p>增量数据渲染</p>\n<ul>\n<li>关系分析：添加节点</li>\n<li>关系分析：节点扩散</li>\n</ul>","fields":{"slug":"/zh/examples/render/expand"},"frontmatter":{"title":"增量数据渲染","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"render/expand/index.zh.md"}}},{"node":{"html":"<p>In time series analysis, the timeline is essential. The design of Timebar timeline in Graphin's design specification is still in progress. Here, we provide a demo to illustrate the basic implementation idea.</p>\n<ul>\n<li>demo-1: simple self-implementation of Timebar</li>\n<li>demo-2: The graphin-components built-in Timebar is being developed...</li>\n</ul>","fields":{"slug":"/en/examples/components/timebar"},"frontmatter":{"title":"Timebar","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"components/timebar/index.en.md"}}},{"node":{"html":"<p>在时序分析中，时间轴必不可少，Graphin 的设计规范里针对 Timebar 时间轴的设计还在进行中，我们这里通过提供一个 demo，来说明基本实现思路</p>\n<ul>\n<li>demo-1 : 简单自实现 Timebar</li>\n<li>demo-2 : 官方内置 Timebar，正在开发中...</li>\n</ul>","fields":{"slug":"/zh/examples/components/timebar"},"frontmatter":{"title":"Timebar 时间轴","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"components/timebar/index.zh.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"case/graph-knowledge/demo/Simple.jsx","absolutePath":"/Users/pomelo/Desktop/workspace/graphin/packages/graphin-site/examples/case/graph-knowledge/demo/Simple.jsx","order":0,"filename":"Simple.jsx","title":"风控知识图谱","screenshot":"","source":"/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Graphin from '@antv/graphin';\nimport '@antv/graphin/dist/index.css'; // 引入Graphin CSS\n\nconst source = {\n  nodes: [\n    {\n      name: '大安全',\n    },\n    {\n      name: '反洗钱',\n    },\n    {\n      name: '内容安全',\n    },\n    {\n      name: '终端安全',\n    },\n    {\n      name: '身份安全',\n    },\n    {\n      name: '业务安全',\n    },\n    {\n      name: '反欺诈',\n    },\n    {\n      name: '反作弊',\n    },\n    /** 反欺诈 */\n    {\n      name: '盗用',\n    },\n    {\n      name: '骗贷',\n    },\n    {\n      name: '骗赔',\n    },\n    {\n      name: '骗保',\n    },\n    /** 反作弊 */\n    {\n      name: '刷单',\n    },\n    {\n      name: '薅羊毛',\n    },\n    {\n      name: '廉政/内审',\n    },\n  ],\n  edges: [\n    /** 大安全 */\n    {\n      source: '大安全',\n      target: '业务安全',\n      relative: '包含',\n    },\n    {\n      source: '大安全',\n      target: '反洗钱',\n      relative: '包含',\n    },\n    {\n      source: '大安全',\n      target: '内容安全',\n      relative: '包含',\n    },\n\n    {\n      source: '大安全',\n      target: '身份安全',\n      relative: '包含',\n    },\n    {\n      source: '大安全',\n      target: '终端安全',\n      relative: '包含',\n    },\n    {\n      source: '大安全',\n      target: '业务安全',\n      relative: '包含',\n    },\n\n    /** 业务安全 */\n    {\n      source: '业务安全',\n      target: '反作弊',\n      relative: '包含',\n    },\n\n    {\n      source: '业务安全',\n      target: '反欺诈',\n      relative: '包含',\n    },\n    /** 反欺诈 */\n    {\n      source: '反欺诈',\n      target: '盗用',\n      relative: '案例',\n    },\n    {\n      source: '反欺诈',\n      target: '骗贷',\n      relative: '案例',\n    },\n    {\n      source: '反欺诈',\n      target: '骗赔',\n      relative: '案例',\n    },\n    {\n      source: '反欺诈',\n      target: '骗保',\n      relative: '案例',\n    },\n    /** 反作弊 */\n    {\n      source: '反作弊',\n      target: '刷单',\n      relative: '案例',\n    },\n    {\n      source: '反作弊',\n      target: '薅羊毛',\n      relative: '案例',\n    },\n    {\n      source: '反作弊',\n      target: '廉政/内审',\n      relative: '案例',\n    },\n  ],\n};\n\nconst nodes = source.nodes.map(node => {\n  return {\n    data: node,\n    shape: 'CanonicalCircleNode',\n    id: node.name,\n    label: node.name,\n    style: {\n      icon: node.type,\n      fontFamily: 'graphin',\n      nodeSize: 18,\n    },\n  };\n});\n\nconst edges = source.edges.map(edge => {\n  return {\n    data: edge,\n    source: edge.source,\n    target: edge.target,\n    shape: 'CanonicalLineEdge',\n    label: edge.relative,\n  };\n});\n\nconst App = () => (\n  <Graphin\n    data={{\n      nodes,\n      edges,\n    }}\n    layout={{\n      name: 'dagre',\n      options: {\n        align: 'DL',\n      },\n    }}\n  />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"@antv/graphin\", \"@antv/graphin/dist/index.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"@antv/graphin\"), require(\"@antv/graphin/dist/index.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.graphin, global.index);\n    global.Simple = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _graphin, _index) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireDefault(_graphin);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /* eslint-disable no-undef */\n  // 引入Graphin CSS\n  var source = {\n    nodes: [{\n      name: '大安全'\n    }, {\n      name: '反洗钱'\n    }, {\n      name: '内容安全'\n    }, {\n      name: '终端安全'\n    }, {\n      name: '身份安全'\n    }, {\n      name: '业务安全'\n    }, {\n      name: '反欺诈'\n    }, {\n      name: '反作弊'\n    },\n    /** 反欺诈 */\n    {\n      name: '盗用'\n    }, {\n      name: '骗贷'\n    }, {\n      name: '骗赔'\n    }, {\n      name: '骗保'\n    },\n    /** 反作弊 */\n    {\n      name: '刷单'\n    }, {\n      name: '薅羊毛'\n    }, {\n      name: '廉政/内审'\n    }],\n    edges: [\n    /** 大安全 */\n    {\n      source: '大安全',\n      target: '业务安全',\n      relative: '包含'\n    }, {\n      source: '大安全',\n      target: '反洗钱',\n      relative: '包含'\n    }, {\n      source: '大安全',\n      target: '内容安全',\n      relative: '包含'\n    }, {\n      source: '大安全',\n      target: '身份安全',\n      relative: '包含'\n    }, {\n      source: '大安全',\n      target: '终端安全',\n      relative: '包含'\n    }, {\n      source: '大安全',\n      target: '业务安全',\n      relative: '包含'\n    },\n    /** 业务安全 */\n    {\n      source: '业务安全',\n      target: '反作弊',\n      relative: '包含'\n    }, {\n      source: '业务安全',\n      target: '反欺诈',\n      relative: '包含'\n    },\n    /** 反欺诈 */\n    {\n      source: '反欺诈',\n      target: '盗用',\n      relative: '案例'\n    }, {\n      source: '反欺诈',\n      target: '骗贷',\n      relative: '案例'\n    }, {\n      source: '反欺诈',\n      target: '骗赔',\n      relative: '案例'\n    }, {\n      source: '反欺诈',\n      target: '骗保',\n      relative: '案例'\n    },\n    /** 反作弊 */\n    {\n      source: '反作弊',\n      target: '刷单',\n      relative: '案例'\n    }, {\n      source: '反作弊',\n      target: '薅羊毛',\n      relative: '案例'\n    }, {\n      source: '反作弊',\n      target: '廉政/内审',\n      relative: '案例'\n    }]\n  };\n  var nodes = source.nodes.map(function (node) {\n    return {\n      data: node,\n      shape: 'CanonicalCircleNode',\n      id: node.name,\n      label: node.name,\n      style: {\n        icon: node.type,\n        fontFamily: 'graphin',\n        nodeSize: 18\n      }\n    };\n  });\n  var edges = source.edges.map(function (edge) {\n    return {\n      data: edge,\n      source: edge.source,\n      target: edge.target,\n      shape: 'CanonicalLineEdge',\n      label: edge.relative\n    };\n  });\n\n  var App = function App() {\n    return _react.default.createElement(_graphin.default, {\n      data: {\n        nodes: nodes,\n        edges: edges\n      },\n      layout: {\n        name: 'dagre',\n        options: {\n          align: 'DL'\n        }\n      }\n    });\n  };\n\n  _reactDom.default.render(_react.default.createElement(App, null), document.getElementById('container'));\n});"}]}}}}