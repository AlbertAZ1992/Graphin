{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-1-0-0-beta-9-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/shape/edge","result":{"data":{"site":{"siteMetadata":{"title":"Graphin","githubUrl":"https://github.com/antvis/graphin","examples":[{"slug":"render","icon":null,"title":{"zh":"数据渲染","en":"render"}},{"slug":"layout","icon":null,"title":{"zh":"内置布局","en":"layout"}},{"slug":"shape","icon":null,"title":{"zh":"节点与边","en":"shape"}},{"slug":"components","icon":null,"title":{"zh":"分析组件","en":"components"}},{"slug":"advanced","icon":null,"title":{"zh":"高级功能","en":"advanced"}},{"slug":"case","icon":null,"title":{"zh":"分析案例","en":"case"}}],"playground":{"container":null,"playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":null,"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/zh/examples/render/simple"},"frontmatter":{"title":"数据无布局信息","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"render/simple/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/layout/base"},"frontmatter":{"title":"基础布局","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"layout/base/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/components/toolbar"},"frontmatter":{"title":"Toolbar","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/toolbar"},"frontmatter":{"title":"Toolbar 工具栏","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/identification"},"frontmatter":{"title":"身份识别","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/identification/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/graph-knowledge"},"frontmatter":{"title":"知识图谱","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/graph-knowledge/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/anti-fraud"},"frontmatter":{"title":"反欺诈","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/anti-fraud/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/advanced/node-combo"},"frontmatter":{"title":"Node Combo","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-combo/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/node-expand"},"frontmatter":{"title":"节点扩散","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-expand/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/node-combo"},"frontmatter":{"title":"节点分组","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-combo/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/layout-switching"},"frontmatter":{"title":"布局切换","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/layout-switching/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/find-connections"},"frontmatter":{"title":"关系发现","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/find-connections/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/shape/node"},"frontmatter":{"title":"内置节点","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"shape/node/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/render/save"},"frontmatter":{"title":"数据有布局信息","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"render/save/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/layout/force"},"frontmatter":{"title":"力导布局","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"layout/force/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/legend"},"frontmatter":{"title":"Legend 图例","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/legend/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/components/legend"},"frontmatter":{"title":"Legend","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/legend/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/components/contextmenu"},"frontmatter":{"title":"ContextMenu","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/contextmenu/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/contextmenu"},"frontmatter":{"title":"ContextMenu 右键菜单","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/contextmenu/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/shape/edge"},"frontmatter":{"title":"多边","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"shape/edge/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/render/expand"},"frontmatter":{"title":"增量数据渲染","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"render/expand/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/layout/sublayout"},"frontmatter":{"title":"子图布局","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"layout/sublayout/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/timebar"},"frontmatter":{"title":"Timebar 时间轴","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"components/timebar/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/components/timebar"},"frontmatter":{"title":"Timebar","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"components/timebar/index.en.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"shape/edge/demo/PolyEdgeShape.jsx","absolutePath":"/Users/pomelo/Desktop/github/Graphin/packages/graphin-site/examples/shape/edge/demo/PolyEdgeShape.jsx","order":0,"filename":"PolyEdgeShape.jsx","title":"多边","screenshot":"","source":"/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Graphin, { Utils } from '@antv/graphin';\nimport '@antv/graphin/dist/index.css'; // 引入Graphin CSS\nimport '@antv/graphin-components/dist/index.css'; // 引入Graphin CSS\n\nconst data = Utils.mock(5).circle().graphin();\n// 5边 MOCK\nconst polyEdge1 = (c) => {\n  const item = { source: 'node-0', target: 'node-1', label: `edge-0_1_${c}` };\n  return {\n    ...item,\n    data: {\n      ...item,\n      properties: [],\n    },\n  };\n};\nfor (let i = 0; i < 3; i++) data.edges.push(polyEdge1(i));\n// 4边 MOCK\nconst polyEdge2 = (c) => {\n  const item = { source: 'node-0', target: 'node-2', label: `edge-0_2_${c}` };\n  return {\n    ...item,\n    data: {\n      ...item,\n      properties: [],\n    },\n  };\n};\nfor (let i = 0; i < 2; i++) data.edges.push(polyEdge2(i));\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Graphin\n        data={data}\n        options={{\n          autoPolyEdge: true,\n        }}\n        layout={{\n          name: 'force',\n          options: {\n            defSpringLen: (_edge, source, target) => {\n              /** 默认返回的是 200 的弹簧长度 */\n\n              /** 如果你要想要产生聚类的效果，可以考虑 根据边两边节点的度数来动态设置边的初始化长度：度数越小，则边越短 */\n              const nodeSize = 30;\n              const Sdegree = source.data.layout?.degree;\n              const Tdegree = target.data.layout?.degree;\n              const minDegree = Math.min(Sdegree, Tdegree);\n              return minDegree < 3 ? nodeSize * 5 : minDegree * nodeSize * 2;\n            },\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"@antv/graphin\", \"@antv/graphin/dist/index.css\", \"@antv/graphin-components/dist/index.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"@antv/graphin\"), require(\"@antv/graphin/dist/index.css\"), require(\"@antv/graphin-components/dist/index.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.graphin, global.index, global.index);\n    global.PolyEdgeShape = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _graphin, _index, _index2) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireWildcard(_graphin);\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /* eslint-disable no-undef */\n  // 引入Graphin CSS\n  // 引入Graphin CSS\n  var data = _graphin.Utils.mock(5).circle().graphin(); // 5边 MOCK\n\n\n  var polyEdge1 = function polyEdge1(c) {\n    var item = {\n      source: 'node-0',\n      target: 'node-1',\n      label: \"edge-0_1_\".concat(c)\n    };\n    return { ...item,\n      data: { ...item,\n        properties: []\n      }\n    };\n  };\n\n  for (var i = 0; i < 3; i++) {\n    data.edges.push(polyEdge1(i));\n  } // 4边 MOCK\n\n\n  var polyEdge2 = function polyEdge2(c) {\n    var item = {\n      source: 'node-0',\n      target: 'node-2',\n      label: \"edge-0_2_\".concat(c)\n    };\n    return { ...item,\n      data: { ...item,\n        properties: []\n      }\n    };\n  };\n\n  for (var _i = 0; _i < 2; _i++) {\n    data.edges.push(polyEdge2(_i));\n  }\n\n  var App = function App() {\n    return /*#__PURE__*/_react.default.createElement(\"div\", {\n      className: \"App\"\n    }, /*#__PURE__*/_react.default.createElement(_graphin.default, {\n      data: data,\n      options: {\n        autoPolyEdge: true\n      },\n      layout: {\n        name: 'force',\n        options: {\n          defSpringLen: function defSpringLen(_edge, source, target) {\n            var _source$data$layout, _target$data$layout;\n\n            /** 默认返回的是 200 的弹簧长度 */\n\n            /** 如果你要想要产生聚类的效果，可以考虑 根据边两边节点的度数来动态设置边的初始化长度：度数越小，则边越短 */\n            var nodeSize = 30;\n            var Sdegree = (_source$data$layout = source.data.layout) === null || _source$data$layout === void 0 ? void 0 : _source$data$layout.degree;\n            var Tdegree = (_target$data$layout = target.data.layout) === null || _target$data$layout === void 0 ? void 0 : _target$data$layout.degree;\n            var minDegree = Math.min(Sdegree, Tdegree);\n            return minDegree < 3 ? nodeSize * 5 : minDegree * nodeSize * 2;\n          }\n        }\n      }\n    }));\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('container'));\n});"}]},"description":"<p>目前 Graphin 支持多边，通过设置 options.autoPolyEdge = true 开启</p>"}},"staticQueryHashes":["1015175297","3000541721","3000541721","653731124"]}