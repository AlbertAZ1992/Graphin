{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-1-0-0-beta-9-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/shape/node","result":{"data":{"site":{"siteMetadata":{"title":"Graphin","githubUrl":"https://github.com/antvis/graphin","examples":[{"slug":"render","icon":null,"title":{"zh":"数据渲染","en":"render"}},{"slug":"layout","icon":null,"title":{"zh":"内置布局","en":"layout"}},{"slug":"shape","icon":null,"title":{"zh":"节点与边","en":"shape"}},{"slug":"components","icon":null,"title":{"zh":"分析组件","en":"components"}},{"slug":"advanced","icon":null,"title":{"zh":"高级功能","en":"advanced"}},{"slug":"case","icon":null,"title":{"zh":"分析案例","en":"case"}}],"playground":{"container":null,"playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":null,"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/zh/examples/render/simple"},"frontmatter":{"title":"数据无布局信息","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"render/simple/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/layout/base"},"frontmatter":{"title":"基础布局","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"layout/base/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/components/toolbar"},"frontmatter":{"title":"Toolbar","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/toolbar"},"frontmatter":{"title":"Toolbar 工具栏","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/identification"},"frontmatter":{"title":"身份识别","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/identification/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/graph-knowledge"},"frontmatter":{"title":"知识图谱","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/graph-knowledge/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/anti-fraud"},"frontmatter":{"title":"反欺诈","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/anti-fraud/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/node-expand"},"frontmatter":{"title":"节点扩散","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-expand/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/advanced/node-combo"},"frontmatter":{"title":"Node Combo","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-combo/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/node-combo"},"frontmatter":{"title":"节点分组","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-combo/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/layout-switching"},"frontmatter":{"title":"布局切换","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/layout-switching/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/find-connections"},"frontmatter":{"title":"关系发现","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/find-connections/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/shape/node"},"frontmatter":{"title":"内置节点","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"shape/node/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/render/save"},"frontmatter":{"title":"数据有布局信息","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"render/save/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/layout/force"},"frontmatter":{"title":"力导布局","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"layout/force/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/legend"},"frontmatter":{"title":"Legend 图例","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/legend/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/components/legend"},"frontmatter":{"title":"Legend","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/legend/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/components/contextmenu"},"frontmatter":{"title":"ContextMenu","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/contextmenu/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/contextmenu"},"frontmatter":{"title":"ContextMenu 右键菜单","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/contextmenu/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/shape/edge"},"frontmatter":{"title":"多边","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"shape/edge/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/render/expand"},"frontmatter":{"title":"增量数据渲染","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"render/expand/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/layout/sublayout"},"frontmatter":{"title":"子图布局","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"layout/sublayout/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/timebar"},"frontmatter":{"title":"Timebar 时间轴","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"components/timebar/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/components/timebar"},"frontmatter":{"title":"Timebar","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"components/timebar/index.en.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"shape/node/demo/InnerShape.jsx","absolutePath":"/Users/pomelo/Desktop/github/Graphin/packages/graphin-site/examples/shape/node/demo/InnerShape.jsx","order":0,"filename":"InnerShape.jsx","title":"内置节点","screenshot":"","source":"/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Graphin, { Utils } from '@antv/graphin';\nimport '../../edge/demo/node_modules/@antv/graphin/dist/index.css'; // 引入Graphin CSS\n\n/**\n * Graphin 内置几种预定义的节点样式，您可以根据需要选择合适的样式\n */\nconst INNER_SHAPES = ['StubNode', 'CircleNode', 'HexagonNode', 'PointNode', 'RectNode', 'SimplicityNode'];\n\nconst data = Utils.mock(20).tree().graphin();\ndata.nodes.forEach((node, index) => {\n  const shape = INNER_SHAPES[index % INNER_SHAPES.length];\n  node.shape = shape;\n  node.label = shape;\n  node.style = node.style || {};\n  // 修改节点大小\n  node.style.nodeSize = 26;\n  // 设置节点徽标\n  node.badge = 4;\n});\ndata.edges.forEach((edge, index) => {\n  edge.shape = 'LineEdge';\n  edge.style = edge.style || {\n    line: {},\n  };\n  // 设置Edge虚实\n  edge.style.line.dash = index % 3 === 0 ? [2, 2] : null;\n  // 设置Edge的宽度\n  edge.style.line.width = index % 3 === 1 ? 3 : 1;\n});\n\nconst App = () => {\n  return (\n    <div>\n      <Graphin data={data} layout={{ name: 'force' }} />\n    </div>\n  );\n};\nconst rootElement = document.getElementById('container');\nReactDOM.render(<App />, rootElement);\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"@antv/graphin\", \"../../edge/demo/node_modules/@antv/graphin/dist/index.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"@antv/graphin\"), require(\"../../edge/demo/node_modules/@antv/graphin/dist/index.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.graphin, global.index);\n    global.InnerShape = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _graphin, _index) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireWildcard(_graphin);\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /* eslint-disable no-undef */\n  // 引入Graphin CSS\n\n  /**\n   * Graphin 内置几种预定义的节点样式，您可以根据需要选择合适的样式\n   */\n  var INNER_SHAPES = ['StubNode', 'CircleNode', 'HexagonNode', 'PointNode', 'RectNode', 'SimplicityNode'];\n\n  var data = _graphin.Utils.mock(20).tree().graphin();\n\n  data.nodes.forEach(function (node, index) {\n    var shape = INNER_SHAPES[index % INNER_SHAPES.length];\n    node.shape = shape;\n    node.label = shape;\n    node.style = node.style || {}; // 修改节点大小\n\n    node.style.nodeSize = 26; // 设置节点徽标\n\n    node.badge = 4;\n  });\n  data.edges.forEach(function (edge, index) {\n    edge.shape = 'LineEdge';\n    edge.style = edge.style || {\n      line: {}\n    }; // 设置Edge虚实\n\n    edge.style.line.dash = index % 3 === 0 ? [2, 2] : null; // 设置Edge的宽度\n\n    edge.style.line.width = index % 3 === 1 ? 3 : 1;\n  });\n\n  var App = function App() {\n    return /*#__PURE__*/_react.default.createElement(\"div\", null, /*#__PURE__*/_react.default.createElement(_graphin.default, {\n      data: data,\n      layout: {\n        name: 'force'\n      }\n    }));\n  };\n\n  var rootElement = document.getElementById('container');\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), rootElement);\n});"},{"relativePath":"shape/node/demo/CustomNode.jsx","absolutePath":"/Users/pomelo/Desktop/github/Graphin/packages/graphin-site/examples/shape/node/demo/CustomNode.jsx","order":1,"filename":"CustomNode.jsx","title":"自定义节点","screenshot":"","source":"/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Graphin from '@antv/graphin';\nimport '@antv/graphin/dist/index.css'; // 引入Graphin CSS\n\nconst defaultStyles = {\n    /** container 容齐 */\n    containerWidth: 40,\n    containerStroke: '#0693E3',\n    containerFill: '#fff',\n    /** icon 图标 */\n    iconSize: 10,\n    iconFill: '#0693E3',\n    /** badge 徽标 */\n    badgeFill: 'red',\n    badgeFontColor: '#fff',\n    badgeSize: 10,\n    /** text 文本 */\n    fontColor: '#3b3b3b',\n    fontSize: 12,\n    /** state */\n    dark: '#eee',\n};\n\nconst renderCustomNodeShape = node => {\n    const style = {\n        ...defaultStyles,\n        ...node.style,\n    };\n    const badgeNumber = 0;\n\n    return {\n        shape: 'CustomNode',\n        shapeComponents: [\n            {\n                shape: 'rect',\n                attrs: {\n                    id: 'rect-container',\n                    x: 0,\n                    y: 0,\n                    width: style.containerWidth,\n                    height: style.containerWidth,\n                    fill: style.containerFill,\n                    stroke: style.containerStroke,\n                    cursor: 'pointer',\n                    lineWidth: 2,\n                    radius: 2,\n                },\n            },\n            {\n                shape: 'circle',\n                attrs: {\n                    id: 'badge',\n                    x: style.containerWidth,\n                    y: 0,\n                    r: style.badgeSize,\n                    fill: style.badgeFill,\n                    cursor: 'pointer',\n                    lineWidth: 1,\n                },\n            },\n            {\n                shape: 'text',\n                attrs: {\n                    id: 'badge-text',\n                    x: style.containerWidth,\n                    y: -4,\n                    text: badgeNumber,\n                    fontSize: 10,\n                    cursor: 'pointer',\n                    fill: '#fff',\n                    textAlign: 'center',\n                    textBaseline: 'top',\n                },\n            },\n            {\n                shape: 'text',\n                attrs: {\n                    id: 'text-desc',\n                    text: node.data.label,\n                    x: 0,\n                    y: style.containerWidth * 1.3,\n                    cursor: 'pointer',\n                    fontSize: style.fontSize,\n                    fill: style.fontColor,\n                    fontWeight: 'lighter',\n                    fontFamily: 'Courier New',\n                    textAlign: 'center',\n                    textBaseline: 'top',\n                },\n            },\n        ],\n        state: {\n            selected: {\n                'rect-container': {\n                    stroke: style.containerStroke,\n                    fill: style.containerStroke,\n                    animate: {\n                        attrs: {\n                            lineWidth: 6,\n                            shadowOffsetX: 0,\n                            shadowOffsetY: 0,\n                            shadowBlur: 2,\n                            shadowColor: '#fff',\n                            repeat: false, // 循环\n                        },\n                        duration: 200,\n                        easing: 'easeCubic',\n                        callback: null,\n                        delay: 0,\n                    },\n                },\n                'node-icon': {\n                    fill: '#fff',\n                },\n                badge: {\n                    lineWidth: 6,\n                },\n            },\n        },\n        'highlight.dark': {\n            'rect-container': {\n                fill: style.dark,\n                stroke: style.dark,\n                lineWidth: 0,\n            },\n            'node-icon': {\n                fill: style.dark,\n            },\n            'text-desc': {\n                fill: '#eee',\n            },\n            badge: {\n                fill: style.dark,\n            },\n            'badge-text': {\n                fill: style.dark,\n            },\n        },\n    };\n};\n\nconst data = {\n    edges: [],\n    nodes: [\n        {\n            id: 'Shape-CustomNode',\n            shape: 'CustomNode',\n            data: {\n                label: `shape:\"CustomNode\"`,\n            },\n        },\n    ],\n};\n\nconst App = () => (\n    <Graphin\n        data={data}\n        layout={{ name: 'grid' }}\n        extend={{\n            nodeShape: () => {\n                return [\n                    {\n                        name: 'CustomNode',\n                        render: renderCustomNodeShape,\n                    },\n                ];\n            },\n        }}\n    />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"@antv/graphin\", \"@antv/graphin/dist/index.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"@antv/graphin\"), require(\"@antv/graphin/dist/index.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.graphin, global.index);\n    global.CustomNode = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _graphin, _index) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireDefault(_graphin);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /* eslint-disable no-undef */\n  // 引入Graphin CSS\n  var defaultStyles = {\n    /** container 容齐 */\n    containerWidth: 40,\n    containerStroke: '#0693E3',\n    containerFill: '#fff',\n\n    /** icon 图标 */\n    iconSize: 10,\n    iconFill: '#0693E3',\n\n    /** badge 徽标 */\n    badgeFill: 'red',\n    badgeFontColor: '#fff',\n    badgeSize: 10,\n\n    /** text 文本 */\n    fontColor: '#3b3b3b',\n    fontSize: 12,\n\n    /** state */\n    dark: '#eee'\n  };\n\n  var renderCustomNodeShape = function renderCustomNodeShape(node) {\n    var style = { ...defaultStyles,\n      ...node.style\n    };\n    var badgeNumber = 0;\n    return {\n      shape: 'CustomNode',\n      shapeComponents: [{\n        shape: 'rect',\n        attrs: {\n          id: 'rect-container',\n          x: 0,\n          y: 0,\n          width: style.containerWidth,\n          height: style.containerWidth,\n          fill: style.containerFill,\n          stroke: style.containerStroke,\n          cursor: 'pointer',\n          lineWidth: 2,\n          radius: 2\n        }\n      }, {\n        shape: 'circle',\n        attrs: {\n          id: 'badge',\n          x: style.containerWidth,\n          y: 0,\n          r: style.badgeSize,\n          fill: style.badgeFill,\n          cursor: 'pointer',\n          lineWidth: 1\n        }\n      }, {\n        shape: 'text',\n        attrs: {\n          id: 'badge-text',\n          x: style.containerWidth,\n          y: -4,\n          text: badgeNumber,\n          fontSize: 10,\n          cursor: 'pointer',\n          fill: '#fff',\n          textAlign: 'center',\n          textBaseline: 'top'\n        }\n      }, {\n        shape: 'text',\n        attrs: {\n          id: 'text-desc',\n          text: node.data.label,\n          x: 0,\n          y: style.containerWidth * 1.3,\n          cursor: 'pointer',\n          fontSize: style.fontSize,\n          fill: style.fontColor,\n          fontWeight: 'lighter',\n          fontFamily: 'Courier New',\n          textAlign: 'center',\n          textBaseline: 'top'\n        }\n      }],\n      state: {\n        selected: {\n          'rect-container': {\n            stroke: style.containerStroke,\n            fill: style.containerStroke,\n            animate: {\n              attrs: {\n                lineWidth: 6,\n                shadowOffsetX: 0,\n                shadowOffsetY: 0,\n                shadowBlur: 2,\n                shadowColor: '#fff',\n                repeat: false // 循环\n\n              },\n              duration: 200,\n              easing: 'easeCubic',\n              callback: null,\n              delay: 0\n            }\n          },\n          'node-icon': {\n            fill: '#fff'\n          },\n          badge: {\n            lineWidth: 6\n          }\n        }\n      },\n      'highlight.dark': {\n        'rect-container': {\n          fill: style.dark,\n          stroke: style.dark,\n          lineWidth: 0\n        },\n        'node-icon': {\n          fill: style.dark\n        },\n        'text-desc': {\n          fill: '#eee'\n        },\n        badge: {\n          fill: style.dark\n        },\n        'badge-text': {\n          fill: style.dark\n        }\n      }\n    };\n  };\n\n  var data = {\n    edges: [],\n    nodes: [{\n      id: 'Shape-CustomNode',\n      shape: 'CustomNode',\n      data: {\n        label: \"shape:\\\"CustomNode\\\"\"\n      }\n    }]\n  };\n\n  var App = function App() {\n    return /*#__PURE__*/_react.default.createElement(_graphin.default, {\n      data: data,\n      layout: {\n        name: 'grid'\n      },\n      extend: {\n        nodeShape: function nodeShape() {\n          return [{\n            name: 'CustomNode',\n            render: renderCustomNodeShape\n          }];\n        }\n      }\n    });\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('container'));\n});"}]},"description":"<p>目前 Graphin 内置了 6 种节点</p>\n<table>\n<thead>\n<tr>\n<th>节点名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SimplicityNode</td>\n<td>简约节点</td>\n</tr>\n<tr>\n<td>CircleNode</td>\n<td>圆形节点</td>\n</tr>\n<tr>\n<td>RectNode</td>\n<td>方形节点</td>\n</tr>\n<tr>\n<td>HexagonNode</td>\n<td>六边形节点</td>\n</tr>\n<tr>\n<td>StubNode</td>\n<td>短线节点</td>\n</tr>\n<tr>\n<td>PointNode</td>\n<td>小点节点</td>\n</tr>\n</tbody>\n</table>"}},"staticQueryHashes":["1015175297","3000541721","3000541721","653731124"]}