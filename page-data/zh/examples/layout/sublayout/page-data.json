{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-0-10-49-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/layout/sublayout","result":{"data":{"site":{"siteMetadata":{"title":"Graphin","githubUrl":"https://github.com/antvis/graphin","examples":[{"slug":"render","icon":null,"title":{"zh":"数据渲染","en":"render"}},{"slug":"layout","icon":null,"title":{"zh":"内置布局","en":"layout"}},{"slug":"shape","icon":null,"title":{"zh":"节点与边","en":"shape"}},{"slug":"components","icon":null,"title":{"zh":"分析组件","en":"components"}}],"playground":null},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"html":"<p>Graphin 支持渲染节点：节点本身无任何布局信息(x,y)</p>","fields":{"slug":"/zh/examples/render/simple"},"frontmatter":{"title":"数据无布局信息","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"render/simple/index.zh.md"}}},{"node":{"html":"<p>Graphin 中内置了 5 种基础布局，分别为<code class=\"language-text\">circle</code> , <code class=\"language-text\">concentirc</code> , <code class=\"language-text\">grid</code> , <code class=\"language-text\">radial</code> , <code class=\"language-text\">dagre</code> , 它们通过 Graphin 的 <code class=\"language-text\">props.layout</code>来指定具体的布局函数，为 <code class=\"language-text\">data.nodes</code> 中的节点的添加 x，y 坐标。具体的应用场景详见 <a href=\"/zh/docs/manual/main-concepts/layout\">Layout 自动布局</a>,具体的参数配置详见 <a href=\"/zh/docs/api/layout\">Layout API</a></p>","fields":{"slug":"/zh/examples/layout/base"},"frontmatter":{"title":"基础布局","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"layout/base/index.zh.md"}}},{"node":{"html":"<p>Toolbar 工具栏</p>","fields":{"slug":"/zh/examples/components/toolbar"},"frontmatter":{"title":"toolbar 工具栏","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.zh.md"}}},{"node":{"html":"<ul>\n<li>渲染节点：节点本身携带布局信息(x,y)</li>\n</ul>","fields":{"slug":"/zh/examples/render/save"},"frontmatter":{"title":"数据有布局信息","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"render/save/index.zh.md"}}},{"node":{"html":"<p>Graphin 内置了 6 款布局，且支持自定义布局</p>","fields":{"slug":"/zh/examples/layout/force"},"frontmatter":{"title":"力导布局","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"layout/force/index.zh.md"}}},{"node":{"html":"<p>目前 Graphin 内置了 1 款节点 <code class=\"language-text\">CircleNode</code>，同时也支持自定义节点</p>","fields":{"slug":"/zh/examples/shape/node"},"frontmatter":{"title":"设置节点","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"shape/node/index.zh.md"}}},{"node":{"html":"<p>增量数据渲染</p>\n<ul>\n<li>关系分析：添加节点</li>\n<li>关系分析：节点扩散</li>\n</ul>","fields":{"slug":"/zh/examples/render/expand"},"frontmatter":{"title":"增量数据渲染","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"render/expand/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/layout/sublayout"},"frontmatter":{"title":"子图布局","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"layout/sublayout/index.zh.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"layout/sublayout/demo/Sublayout.jsx","absolutePath":"/Users/pomelo/Desktop/workspace/graphin/packages/graphin-site/examples/layout/sublayout/demo/Sublayout.jsx","order":0,"filename":"Sublayout.jsx","title":"子图布局","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*qpVWRbWiPpIAAAAAAAAAAABkARQnAQ","source":"/* eslint-disable import/no-extraneous-dependencies */\n/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Graphin, { Layout } from '@antv/graphin';\nimport { Button } from 'antd';\nimport '@antv/graphin/dist/index.css'; // 引入Graphin CSS\n\nconst getSub = data => {\n    const { nodes, edges } = data;\n\n    const subNodes1 = [];\n    const subEdges1 = [];\n    const subNodes2 = [];\n    const subEdges2 = [];\n\n    // split the nodes into two parts\n    nodes.forEach((node, i) => {\n        if (i < 10) {\n            subNodes1.push(node);\n        } else {\n            subNodes2.push(node);\n        }\n    });\n\n    // find the edges for these two parts\n    edges.forEach(edge => {\n        let findSource = false;\n        let findTarget = false;\n        subNodes1.forEach(sn => {\n            if (edge.source === sn.id) {\n                findSource = true;\n            } else if (edge.target === sn.id) {\n                findTarget = true;\n            }\n        });\n        if (findSource && findTarget) {\n            subEdges1.push(edge);\n            return;\n        }\n        findSource = false;\n        findTarget = false;\n        subNodes2.forEach(sn => {\n            if (edge.source === sn.id) {\n                findSource = true;\n            } else if (edge.target === sn.id) {\n                findTarget = true;\n            }\n        });\n        if (findSource && findTarget) {\n            subEdges2.push(edge);\n        }\n    });\n\n    // layout the part1\n    const node1 = Layout.Circle({ nodes: subNodes1, edges: subEdges1 }, { x: 100, y: 100, r: 80 });\n\n    // layout the part2\n    const node2 = Layout.Radial({ nodes: subNodes2, edges: subEdges2 }, { center: [220, 220], unitRadius: 100 });\n\n    // combine the two parts\n    const newNodes = [...node1.nodes, ...node2.nodes];\n\n    return {\n        data: {\n            nodes: newNodes,\n            edges: data.edges,\n        },\n        //  stop the simulation if the previous layout is force layout\n        layout: null,\n    };\n};\nconst App = () => {\n    const testData = {\n        nodes: [\n            { id: 'node-0' },\n            { id: 'node-1' },\n            { id: 'node-2' },\n            { id: 'node-3' },\n            { id: 'node-4' },\n            { id: 'node-5' },\n            { id: 'node-6' },\n            { id: 'node-7' },\n            { id: 'node-8' },\n            { id: 'node-9' },\n            { id: 'node-10' },\n            { id: 'node-11' },\n            { id: 'node-12' },\n            { id: 'node-13' },\n            { id: 'node-14' },\n            { id: 'node-15' },\n            { id: 'node-16' },\n            { id: 'node-17' },\n            { id: 'node-18' },\n            { id: 'node-19' },\n        ],\n        edges: [\n            { source: 'node-10', target: 'node-11' },\n            { source: 'node-10', target: 'node-12' },\n            { source: 'node-10', target: 'node-13' },\n            { source: 'node-10', target: 'node-14' },\n            { source: 'node-10', target: 'node-15' },\n            { source: 'node-11', target: 'node-12' },\n            { source: 'node-11', target: 'node-16' },\n            { source: 'node-11', target: 'node-17' },\n            { source: 'node-11', target: 'node-18' },\n            { source: 'node-18', target: 'node-19' },\n        ],\n    };\n    const nodes = [];\n    const edges = [];\n    testData.nodes.forEach(tnode => {\n        tnode.label = tnode.id;\n        tnode.type = 'company';\n        tnode.shape = 'CircleNode';\n        tnode.style = {};\n        const node = {\n            id: tnode.id,\n            data: tnode,\n            shape: 'CircleNode',\n            style: {},\n        };\n        nodes.push(node);\n    });\n    testData.edges.forEach(tedge => {\n        const edge = {\n            source: tedge.source,\n            target: tedge.target,\n            data: tedge,\n        };\n        edges.push(edge);\n    });\n    const [state, setState] = React.useState({\n        data: { nodes, edges },\n        layout: {\n            name: 'force',\n        },\n    });\n\n    const { data, layout } = state;\n\n    return (\n        <div>\n            <Button\n                type=\"primary\"\n                onClick={() => {\n                    const result = getSub(data);\n                    setState({\n                        ...result,\n                    });\n                }}\n            >\n                sub layout\n            </Button>\n            <Graphin data={data} layout={layout} />\n        </div>\n    );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"@antv/graphin\", \"antd\", \"@antv/graphin/dist/index.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"@antv/graphin\"), require(\"antd\"), require(\"@antv/graphin/dist/index.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.graphin, global.antd, global.index);\n    global.Sublayout = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _graphin, _antd, _index) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireWildcard(_graphin);\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  // 引入Graphin CSS\n  var getSub = function getSub(data) {\n    var nodes = data.nodes,\n        edges = data.edges;\n    var subNodes1 = [];\n    var subEdges1 = [];\n    var subNodes2 = [];\n    var subEdges2 = []; // split the nodes into two parts\n\n    nodes.forEach(function (node, i) {\n      if (i < 10) {\n        subNodes1.push(node);\n      } else {\n        subNodes2.push(node);\n      }\n    }); // find the edges for these two parts\n\n    edges.forEach(function (edge) {\n      var findSource = false;\n      var findTarget = false;\n      subNodes1.forEach(function (sn) {\n        if (edge.source === sn.id) {\n          findSource = true;\n        } else if (edge.target === sn.id) {\n          findTarget = true;\n        }\n      });\n\n      if (findSource && findTarget) {\n        subEdges1.push(edge);\n        return;\n      }\n\n      findSource = false;\n      findTarget = false;\n      subNodes2.forEach(function (sn) {\n        if (edge.source === sn.id) {\n          findSource = true;\n        } else if (edge.target === sn.id) {\n          findTarget = true;\n        }\n      });\n\n      if (findSource && findTarget) {\n        subEdges2.push(edge);\n      }\n    }); // layout the part1\n\n    var node1 = _graphin.Layout.Circle({\n      nodes: subNodes1,\n      edges: subEdges1\n    }, {\n      x: 100,\n      y: 100,\n      r: 80\n    }); // layout the part2\n\n\n    var node2 = _graphin.Layout.Radial({\n      nodes: subNodes2,\n      edges: subEdges2\n    }, {\n      center: [220, 220],\n      unitRadius: 100\n    }); // combine the two parts\n\n\n    var newNodes = [].concat(_toConsumableArray(node1.nodes), _toConsumableArray(node2.nodes));\n    return {\n      data: {\n        nodes: newNodes,\n        edges: data.edges\n      },\n      //  stop the simulation if the previous layout is force layout\n      layout: null\n    };\n  };\n\n  var App = function App() {\n    var testData = {\n      nodes: [{\n        id: 'node-0'\n      }, {\n        id: 'node-1'\n      }, {\n        id: 'node-2'\n      }, {\n        id: 'node-3'\n      }, {\n        id: 'node-4'\n      }, {\n        id: 'node-5'\n      }, {\n        id: 'node-6'\n      }, {\n        id: 'node-7'\n      }, {\n        id: 'node-8'\n      }, {\n        id: 'node-9'\n      }, {\n        id: 'node-10'\n      }, {\n        id: 'node-11'\n      }, {\n        id: 'node-12'\n      }, {\n        id: 'node-13'\n      }, {\n        id: 'node-14'\n      }, {\n        id: 'node-15'\n      }, {\n        id: 'node-16'\n      }, {\n        id: 'node-17'\n      }, {\n        id: 'node-18'\n      }, {\n        id: 'node-19'\n      }],\n      edges: [{\n        source: 'node-10',\n        target: 'node-11'\n      }, {\n        source: 'node-10',\n        target: 'node-12'\n      }, {\n        source: 'node-10',\n        target: 'node-13'\n      }, {\n        source: 'node-10',\n        target: 'node-14'\n      }, {\n        source: 'node-10',\n        target: 'node-15'\n      }, {\n        source: 'node-11',\n        target: 'node-12'\n      }, {\n        source: 'node-11',\n        target: 'node-16'\n      }, {\n        source: 'node-11',\n        target: 'node-17'\n      }, {\n        source: 'node-11',\n        target: 'node-18'\n      }, {\n        source: 'node-18',\n        target: 'node-19'\n      }]\n    };\n    var nodes = [];\n    var edges = [];\n    testData.nodes.forEach(function (tnode) {\n      tnode.label = tnode.id;\n      tnode.type = 'company';\n      tnode.shape = 'CircleNode';\n      tnode.style = {};\n      var node = {\n        id: tnode.id,\n        data: tnode,\n        shape: 'CircleNode',\n        style: {}\n      };\n      nodes.push(node);\n    });\n    testData.edges.forEach(function (tedge) {\n      var edge = {\n        source: tedge.source,\n        target: tedge.target,\n        data: tedge\n      };\n      edges.push(edge);\n    });\n\n    var _React$useState = _react.default.useState({\n      data: {\n        nodes: nodes,\n        edges: edges\n      },\n      layout: {\n        name: 'force'\n      }\n    }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n    var data = state.data,\n        layout = state.layout;\n    return _react.default.createElement(\"div\", null, _react.default.createElement(_antd.Button, {\n      type: \"primary\",\n      onClick: function onClick() {\n        var result = getSub(data);\n        setState({ ...result\n        });\n      }\n    }, \"sub layout\"), _react.default.createElement(_graphin.default, {\n      data: data,\n      layout: layout\n    }));\n  };\n\n  _reactDom.default.render(_react.default.createElement(App, null), document.getElementById('container'));\n});"}]}}}}