{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-1-0-0-beta-9-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/advanced/node-expand","result":{"data":{"site":{"siteMetadata":{"title":"Graphin","githubUrl":"https://github.com/antvis/graphin","examples":[{"slug":"render","icon":null,"title":{"zh":"数据渲染","en":"render"}},{"slug":"layout","icon":null,"title":{"zh":"内置布局","en":"layout"}},{"slug":"shape","icon":null,"title":{"zh":"节点与边","en":"shape"}},{"slug":"components","icon":null,"title":{"zh":"分析组件","en":"components"}},{"slug":"advanced","icon":null,"title":{"zh":"高级功能","en":"advanced"}},{"slug":"case","icon":null,"title":{"zh":"分析案例","en":"case"}}],"playground":{"container":null,"playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":null,"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/zh/examples/render/simple"},"frontmatter":{"title":"数据无布局信息","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"render/simple/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/layout/base"},"frontmatter":{"title":"基础布局","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"layout/base/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/components/toolbar"},"frontmatter":{"title":"Toolbar","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/toolbar"},"frontmatter":{"title":"Toolbar 工具栏","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"components/toolbar/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/identification"},"frontmatter":{"title":"身份识别","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/identification/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/graph-knowledge"},"frontmatter":{"title":"知识图谱","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/graph-knowledge/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/anti-fraud"},"frontmatter":{"title":"反欺诈","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/anti-fraud/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/advanced/node-combo"},"frontmatter":{"title":"Node Combo","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-combo/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/node-expand"},"frontmatter":{"title":"节点扩散","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-expand/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/node-combo"},"frontmatter":{"title":"节点分组","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/node-combo/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/layout-switching"},"frontmatter":{"title":"布局切换","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/layout-switching/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/advanced/find-connections"},"frontmatter":{"title":"关系发现","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"advanced/find-connections/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/shape/node"},"frontmatter":{"title":"内置节点","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"shape/node/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/render/save"},"frontmatter":{"title":"数据有布局信息","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"render/save/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/layout/force"},"frontmatter":{"title":"力导布局","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"layout/force/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/legend"},"frontmatter":{"title":"Legend 图例","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/legend/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/components/legend"},"frontmatter":{"title":"Legend","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/legend/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/components/contextmenu"},"frontmatter":{"title":"ContextMenu","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/contextmenu/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/contextmenu"},"frontmatter":{"title":"ContextMenu 右键菜单","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"components/contextmenu/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/shape/edge"},"frontmatter":{"title":"多边","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"shape/edge/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/render/expand"},"frontmatter":{"title":"增量数据渲染","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"render/expand/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/layout/sublayout"},"frontmatter":{"title":"子图布局","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"layout/sublayout/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/components/timebar"},"frontmatter":{"title":"Timebar 时间轴","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"components/timebar/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/components/timebar"},"frontmatter":{"title":"Timebar","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"components/timebar/index.en.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"advanced/node-expand/demo/Force.jsx","absolutePath":"/Users/pomelo/Desktop/github/Graphin/packages/graphin-site/examples/advanced/node-expand/demo/Force.jsx","order":0,"filename":"Force.jsx","title":"力导布局下的关系扩散","screenshot":"","source":"/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Graphin, { Utils } from '@antv/graphin';\nimport { Toolbar } from '@antv/graphin-components';\nimport { message } from 'antd';\nimport '@antv/graphin/dist/index.css'; // 引入Graphin CSS\nimport '@antv/graphin-components/dist/index.css'; // 引入Graphin CSS\n\nconst App = () => {\n  const [state, setState] = React.useState({\n    selected: [],\n    data: Utils.mock(5)\n      .circle()\n      .graphin(),\n  });\n\n  const { data, selected } = state;\n  const graphRef = React.createRef(null);\n  React.useEffect(() => {\n    const { graph } = graphRef.current;\n\n    // 按住Shift框选,按住Option键 多选，进行关系扩散\n    const onNodeSelectChange = e => {\n      console.log('nodeselectchange', e);\n      const nodes = e.selectedItems.nodes.map(node => {\n        return node.get('model');\n      });\n      setState({\n        ...state,\n        selected: nodes,\n      });\n    };\n\n    graph.on('nodeselectchange', onNodeSelectChange);\n    return () => {\n      graph.off('nodeselectchange', onNodeSelectChange);\n    };\n  }, [state]);\n\n  const onExpand = () => {\n    if (selected.length === 0) {\n      message.info('请先选中/圈选节点');\n      return;\n    }\n    const count = Math.round(Math.random() * 20);\n\n    const expandData = Utils.mock(count)\n      .expand(selected)\n      .type('company')\n      .graphin();\n\n    setState({\n      ...state,\n      data: {\n        // 还需要对Node和Edge去重，这里暂不考虑\n        nodes: [...state.data.nodes, ...expandData.nodes],\n        edges: [...state.data.edges, ...expandData.edges],\n      },\n    });\n  };\n  return (\n    <div className=\"App\">\n      <h3>\n        基于力导的节点扩散，支持按住Shift圈选，多个节点同时扩散\n        <button onClick={onExpand} style={{ float: 'right', height: '28px', lineHeight: '28px' }}>\n          点击扩散\n        </button>\n      </h3>\n      <Graphin\n        data={data}\n        layout={{\n          name: 'force',\n          options: {\n            defSpringLen: (_edge, source, target) => {\n              /** 默认返回的是 200 的弹簧长度 */\n\n              /** 如果你要想要产生聚类的效果，可以考虑 根据边两边节点的度数来动态设置边的初始化长度：度数越小，则边越短 */\n              const nodeSize = 30;\n              const Sdegree = source.data.layout?.degree;\n              const Tdegree = target.data.layout?.degree;\n              const minDegree = Math.min(Sdegree, Tdegree);\n              return minDegree < 3 ? nodeSize * 5 : minDegree * nodeSize * 2;\n            },\n          },\n        }}\n        ref={graphRef}\n      >\n        <Toolbar style={{ position: 'absolute', bottom: 28, left: 28 }} />\n      </Graphin>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"@antv/graphin\", \"@antv/graphin-components\", \"antd\", \"@antv/graphin/dist/index.css\", \"@antv/graphin-components/dist/index.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"@antv/graphin\"), require(\"@antv/graphin-components\"), require(\"antd\"), require(\"@antv/graphin/dist/index.css\"), require(\"@antv/graphin-components/dist/index.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.graphin, global.graphinComponents, global.antd, global.index, global.index);\n    global.Force = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _graphin, _graphinComponents, _antd, _index, _index2) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireWildcard(_graphin);\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  // 引入Graphin CSS\n  var App = function App() {\n    var _React$useState = _react.default.useState({\n      selected: [],\n      data: _graphin.Utils.mock(5).circle().graphin()\n    }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n    var data = state.data,\n        selected = state.selected;\n\n    var graphRef = /*#__PURE__*/_react.default.createRef(null);\n\n    _react.default.useEffect(function () {\n      var graph = graphRef.current.graph; // 按住Shift框选,按住Option键 多选，进行关系扩散\n\n      var onNodeSelectChange = function onNodeSelectChange(e) {\n        console.log('nodeselectchange', e);\n        var nodes = e.selectedItems.nodes.map(function (node) {\n          return node.get('model');\n        });\n        setState({ ...state,\n          selected: nodes\n        });\n      };\n\n      graph.on('nodeselectchange', onNodeSelectChange);\n      return function () {\n        graph.off('nodeselectchange', onNodeSelectChange);\n      };\n    }, [state]);\n\n    var onExpand = function onExpand() {\n      if (selected.length === 0) {\n        _antd.message.info('请先选中/圈选节点');\n\n        return;\n      }\n\n      var count = Math.round(Math.random() * 20);\n\n      var expandData = _graphin.Utils.mock(count).expand(selected).type('company').graphin();\n\n      setState({ ...state,\n        data: {\n          // 还需要对Node和Edge去重，这里暂不考虑\n          nodes: [].concat(_toConsumableArray(state.data.nodes), _toConsumableArray(expandData.nodes)),\n          edges: [].concat(_toConsumableArray(state.data.edges), _toConsumableArray(expandData.edges))\n        }\n      });\n    };\n\n    return /*#__PURE__*/_react.default.createElement(\"div\", {\n      className: \"App\"\n    }, /*#__PURE__*/_react.default.createElement(\"h3\", null, \"\\u57FA\\u4E8E\\u529B\\u5BFC\\u7684\\u8282\\u70B9\\u6269\\u6563\\uFF0C\\u652F\\u6301\\u6309\\u4F4FShift\\u5708\\u9009\\uFF0C\\u591A\\u4E2A\\u8282\\u70B9\\u540C\\u65F6\\u6269\\u6563\", /*#__PURE__*/_react.default.createElement(\"button\", {\n      onClick: onExpand,\n      style: {\n        float: 'right',\n        height: '28px',\n        lineHeight: '28px'\n      }\n    }, \"\\u70B9\\u51FB\\u6269\\u6563\")), /*#__PURE__*/_react.default.createElement(_graphin.default, {\n      data: data,\n      layout: {\n        name: 'force',\n        options: {\n          defSpringLen: function defSpringLen(_edge, source, target) {\n            var _source$data$layout, _target$data$layout;\n\n            /** 默认返回的是 200 的弹簧长度 */\n\n            /** 如果你要想要产生聚类的效果，可以考虑 根据边两边节点的度数来动态设置边的初始化长度：度数越小，则边越短 */\n            var nodeSize = 30;\n            var Sdegree = (_source$data$layout = source.data.layout) === null || _source$data$layout === void 0 ? void 0 : _source$data$layout.degree;\n            var Tdegree = (_target$data$layout = target.data.layout) === null || _target$data$layout === void 0 ? void 0 : _target$data$layout.degree;\n            var minDegree = Math.min(Sdegree, Tdegree);\n            return minDegree < 3 ? nodeSize * 5 : minDegree * nodeSize * 2;\n          }\n        }\n      },\n      ref: graphRef\n    }, /*#__PURE__*/_react.default.createElement(_graphinComponents.Toolbar, {\n      style: {\n        position: 'absolute',\n        bottom: 28,\n        left: 28\n      }\n    })));\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('container'));\n});"},{"relativePath":"advanced/node-expand/demo/ForceWithoutAnimation.jsx","absolutePath":"/Users/pomelo/Desktop/github/Graphin/packages/graphin-site/examples/advanced/node-expand/demo/ForceWithoutAnimation.jsx","order":1,"filename":"ForceWithoutAnimation.jsx","title":"力导布局下的关系扩散,不带动画","screenshot":"","source":"/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Graphin, { Utils } from '@antv/graphin';\nimport { Toolbar } from '@antv/graphin-components';\nimport { message } from 'antd';\nimport '@antv/graphin/dist/index.css'; // 引入Graphin CSS\nimport '@antv/graphin-components/dist/index.css'; // 引入Graphin CSS\n\nconst App = () => {\n  const [state, setState] = React.useState({\n    selected: [],\n    data: Utils.mock(5)\n      .circle()\n      .graphin(),\n  });\n\n  const { data, selected } = state;\n  const graphRef = React.createRef(null);\n  React.useEffect(() => {\n    const { graph } = graphRef.current;\n\n    // 按住Shift框选,按住Option键 多选，进行关系扩散\n    const onNodeSelectChange = e => {\n      console.log('nodeselectchange', e);\n      const nodes = e.selectedItems.nodes.map(node => {\n        return node.get('model');\n      });\n      setState({\n        ...state,\n        selected: nodes,\n      });\n    };\n\n    graph.on('nodeselectchange', onNodeSelectChange);\n    return () => {\n      graph.off('nodeselectchange', onNodeSelectChange);\n    };\n  }, [state]);\n\n  const onExpand = () => {\n    if (selected.length === 0) {\n      message.info('请先选中/圈选节点');\n      return;\n    }\n    const count = Math.round(Math.random() * 6);\n\n    const expandData = Utils.mock(count)\n      .expand(selected)\n      .type('company')\n      .graphin();\n\n    setState({\n      ...state,\n      data: {\n        // 还需要对Node和Edge去重，这里暂不考虑\n        nodes: [...state.data.nodes, ...expandData.nodes],\n        edges: [...state.data.edges, ...expandData.edges],\n      },\n    });\n  };\n  return (\n    <div className=\"App\">\n      <h3>\n        基于力导的节点扩散，支持按住Shift圈选，多个节点同时扩散\n        <button onClick={onExpand} style={{ float: 'right', height: '28px', lineHeight: '28px' }}>\n          点击扩散\n        </button>\n      </h3>\n      <Graphin\n        data={data}\n        layout={{\n          name: 'force',\n          options: {\n            animation: false,\n            defSpringLen: (_edge, source, target) => {\n              /** 默认返回的是 200 的弹簧长度 */\n\n              /** 如果你要想要产生聚类的效果，可以考虑 根据边两边节点的度数来动态设置边的初始化长度：度数越小，则边越短 */\n              const nodeSize = 30;\n              const Sdegree = source.data.layout?.degree;\n              const Tdegree = target.data.layout?.degree;\n              const minDegree = Math.min(Sdegree, Tdegree);\n              return minDegree < 3 ? nodeSize * 5 : minDegree * nodeSize * 2;\n            },\n          },\n        }}\n        ref={graphRef}\n      >\n        <Toolbar style={{ position: 'absolute', bottom: 28, left: 28 }} />\n      </Graphin>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"@antv/graphin\", \"@antv/graphin-components\", \"antd\", \"@antv/graphin/dist/index.css\", \"@antv/graphin-components/dist/index.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"@antv/graphin\"), require(\"@antv/graphin-components\"), require(\"antd\"), require(\"@antv/graphin/dist/index.css\"), require(\"@antv/graphin-components/dist/index.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.graphin, global.graphinComponents, global.antd, global.index, global.index);\n    global.ForceWithoutAnimation = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _graphin, _graphinComponents, _antd, _index, _index2) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireWildcard(_graphin);\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  // 引入Graphin CSS\n  var App = function App() {\n    var _React$useState = _react.default.useState({\n      selected: [],\n      data: _graphin.Utils.mock(5).circle().graphin()\n    }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n    var data = state.data,\n        selected = state.selected;\n\n    var graphRef = /*#__PURE__*/_react.default.createRef(null);\n\n    _react.default.useEffect(function () {\n      var graph = graphRef.current.graph; // 按住Shift框选,按住Option键 多选，进行关系扩散\n\n      var onNodeSelectChange = function onNodeSelectChange(e) {\n        console.log('nodeselectchange', e);\n        var nodes = e.selectedItems.nodes.map(function (node) {\n          return node.get('model');\n        });\n        setState({ ...state,\n          selected: nodes\n        });\n      };\n\n      graph.on('nodeselectchange', onNodeSelectChange);\n      return function () {\n        graph.off('nodeselectchange', onNodeSelectChange);\n      };\n    }, [state]);\n\n    var onExpand = function onExpand() {\n      if (selected.length === 0) {\n        _antd.message.info('请先选中/圈选节点');\n\n        return;\n      }\n\n      var count = Math.round(Math.random() * 6);\n\n      var expandData = _graphin.Utils.mock(count).expand(selected).type('company').graphin();\n\n      setState({ ...state,\n        data: {\n          // 还需要对Node和Edge去重，这里暂不考虑\n          nodes: [].concat(_toConsumableArray(state.data.nodes), _toConsumableArray(expandData.nodes)),\n          edges: [].concat(_toConsumableArray(state.data.edges), _toConsumableArray(expandData.edges))\n        }\n      });\n    };\n\n    return /*#__PURE__*/_react.default.createElement(\"div\", {\n      className: \"App\"\n    }, /*#__PURE__*/_react.default.createElement(\"h3\", null, \"\\u57FA\\u4E8E\\u529B\\u5BFC\\u7684\\u8282\\u70B9\\u6269\\u6563\\uFF0C\\u652F\\u6301\\u6309\\u4F4FShift\\u5708\\u9009\\uFF0C\\u591A\\u4E2A\\u8282\\u70B9\\u540C\\u65F6\\u6269\\u6563\", /*#__PURE__*/_react.default.createElement(\"button\", {\n      onClick: onExpand,\n      style: {\n        float: 'right',\n        height: '28px',\n        lineHeight: '28px'\n      }\n    }, \"\\u70B9\\u51FB\\u6269\\u6563\")), /*#__PURE__*/_react.default.createElement(_graphin.default, {\n      data: data,\n      layout: {\n        name: 'force',\n        options: {\n          animation: false,\n          defSpringLen: function defSpringLen(_edge, source, target) {\n            var _source$data$layout, _target$data$layout;\n\n            /** 默认返回的是 200 的弹簧长度 */\n\n            /** 如果你要想要产生聚类的效果，可以考虑 根据边两边节点的度数来动态设置边的初始化长度：度数越小，则边越短 */\n            var nodeSize = 30;\n            var Sdegree = (_source$data$layout = source.data.layout) === null || _source$data$layout === void 0 ? void 0 : _source$data$layout.degree;\n            var Tdegree = (_target$data$layout = target.data.layout) === null || _target$data$layout === void 0 ? void 0 : _target$data$layout.degree;\n            var minDegree = Math.min(Sdegree, Tdegree);\n            return minDegree < 3 ? nodeSize * 5 : minDegree * nodeSize * 2;\n          }\n        }\n      },\n      ref: graphRef\n    }, /*#__PURE__*/_react.default.createElement(_graphinComponents.Toolbar, {\n      style: {\n        position: 'absolute',\n        bottom: 28,\n        left: 28\n      }\n    })));\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('container'));\n});"},{"relativePath":"advanced/node-expand/demo/Dagre.jsx","absolutePath":"/Users/pomelo/Desktop/github/Graphin/packages/graphin-site/examples/advanced/node-expand/demo/Dagre.jsx","order":2,"filename":"Dagre.jsx","title":"有向分层下的关系扩散","screenshot":"","source":"/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { message } from 'antd';\nimport Graphin, { Utils } from '@antv/graphin';\nimport { Toolbar } from '@antv/graphin-components';\nimport '@antv/graphin/dist/index.css'; // 引入Graphin CSS\nimport '@antv/graphin-components/dist/index.css'; // 引入Graphin CSS\n\nconst App = () => {\n  const [state, setState] = React.useState({\n    selected: [],\n    data: Utils.mock(5)\n      .circle()\n      .graphin(),\n  });\n\n  const { data, selected } = state;\n  const graphRef = React.createRef(null);\n  React.useEffect(() => {\n    const { graph } = graphRef.current;\n    // 按住Shift框选,按住Option键 多选，进行关系扩散\n    const onNodeSelectChange = e => {\n      console.log('nodeselectchange', e);\n      const nodes = e.selectedItems.nodes.map(node => {\n        return node.get('model');\n      });\n      setState({\n        ...state,\n        selected: nodes,\n      });\n    };\n\n    graph.on('nodeselectchange', onNodeSelectChange);\n    return () => {\n      graph.off('nodeselectchange', onNodeSelectChange);\n    };\n  }, [state]);\n\n  const onExpand = () => {\n    if (selected.length === 0) {\n      message.info('请先选中/圈选节点');\n      return;\n    }\n    const count = Math.round(Math.random() * 20);\n\n    const expandData = Utils.mock(count)\n      .expand(selected)\n      .type('company')\n      .graphin();\n\n    setState({\n      ...state,\n      data: {\n        // 还需要对Node和Edge去重，这里暂不考虑\n        nodes: [...state.data.nodes, ...expandData.nodes],\n        edges: [...state.data.edges, ...expandData.edges],\n      },\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h3>\n        基于有向分层的节点扩散\n        <button onClick={onExpand} style={{ float: 'right', height: '28px', lineHeight: '28px' }}>\n          点击扩散\n        </button>\n      </h3>\n\n      <Graphin\n        data={data}\n        layout={{\n          name: 'dagre',\n        }}\n        ref={graphRef}\n      >\n        <Toolbar style={{ position: 'absolute', bottom: 28, left: 28 }} />\n      </Graphin>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"antd\", \"@antv/graphin\", \"@antv/graphin-components\", \"@antv/graphin/dist/index.css\", \"@antv/graphin-components/dist/index.css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"antd\"), require(\"@antv/graphin\"), require(\"@antv/graphin-components\"), require(\"@antv/graphin/dist/index.css\"), require(\"@antv/graphin-components/dist/index.css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.antd, global.graphin, global.graphinComponents, global.index, global.index);\n    global.Dagre = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _antd, _graphin, _graphinComponents, _index, _index2) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _graphin = _interopRequireWildcard(_graphin);\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  // 引入Graphin CSS\n  var App = function App() {\n    var _React$useState = _react.default.useState({\n      selected: [],\n      data: _graphin.Utils.mock(5).circle().graphin()\n    }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n    var data = state.data,\n        selected = state.selected;\n\n    var graphRef = /*#__PURE__*/_react.default.createRef(null);\n\n    _react.default.useEffect(function () {\n      var graph = graphRef.current.graph; // 按住Shift框选,按住Option键 多选，进行关系扩散\n\n      var onNodeSelectChange = function onNodeSelectChange(e) {\n        console.log('nodeselectchange', e);\n        var nodes = e.selectedItems.nodes.map(function (node) {\n          return node.get('model');\n        });\n        setState({ ...state,\n          selected: nodes\n        });\n      };\n\n      graph.on('nodeselectchange', onNodeSelectChange);\n      return function () {\n        graph.off('nodeselectchange', onNodeSelectChange);\n      };\n    }, [state]);\n\n    var onExpand = function onExpand() {\n      if (selected.length === 0) {\n        _antd.message.info('请先选中/圈选节点');\n\n        return;\n      }\n\n      var count = Math.round(Math.random() * 20);\n\n      var expandData = _graphin.Utils.mock(count).expand(selected).type('company').graphin();\n\n      setState({ ...state,\n        data: {\n          // 还需要对Node和Edge去重，这里暂不考虑\n          nodes: [].concat(_toConsumableArray(state.data.nodes), _toConsumableArray(expandData.nodes)),\n          edges: [].concat(_toConsumableArray(state.data.edges), _toConsumableArray(expandData.edges))\n        }\n      });\n    };\n\n    return /*#__PURE__*/_react.default.createElement(\"div\", {\n      className: \"App\"\n    }, /*#__PURE__*/_react.default.createElement(\"h3\", null, \"\\u57FA\\u4E8E\\u6709\\u5411\\u5206\\u5C42\\u7684\\u8282\\u70B9\\u6269\\u6563\", /*#__PURE__*/_react.default.createElement(\"button\", {\n      onClick: onExpand,\n      style: {\n        float: 'right',\n        height: '28px',\n        lineHeight: '28px'\n      }\n    }, \"\\u70B9\\u51FB\\u6269\\u6563\")), /*#__PURE__*/_react.default.createElement(_graphin.default, {\n      data: data,\n      layout: {\n        name: 'dagre'\n      },\n      ref: graphRef\n    }, /*#__PURE__*/_react.default.createElement(_graphinComponents.Toolbar, {\n      style: {\n        position: 'absolute',\n        bottom: 28,\n        left: 28\n      }\n    })));\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('container'));\n});"}]},"description":"<ul>\n<li>利用风险聚集原理，由一个风险节点扩散去找其他风险节点。</li>\n</ul>"}},"staticQueryHashes":["1015175297","3000541721","3000541721","653731124"]}